"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const { Sequelize, QueryTypes } = require('sequelize');
const sequelizeConfig = require('../config/sequelizeConfig.json');
//const db = createModels(sequelizeConfig);
//const sequelize=db.Sequelize;
const sequelize = new Sequelize("bessamDB", "phpmyadmin", "tgbyhnuj", {
    "host": "localhost",
    "dialect": "mysql",
    "port": 3306,
    "pool": {
        "max": 5,
        "min": 0,
        "idle": 20000,
        "acquire": 20000
    }
});
//const test = db.Test
var formidable = require('formidable');
var http = require('http'), util = require('util'), os = require('os');
const pwd = require('./password.js');
const transporter = require('./transporter.js');
var message = '';
const log = console.log;
function lance_scp(filename) {
    const host_to = process.env.host_to;
    const user_to = process.env.user_to;
    const password_to = process.env.password_to;
    const directory_from = process.env.directory_logo_from;
    const directory_to = process.env.directory_logo_to;
    var client = require('scp2');
    client.scp(directory_from + filename, {
        host: host_to,
        username: user_to,
        password: password_to,
        //privateKey:`AAAAB3NzaC1kc3MAAACBAMcAd9W3Bh+QkIlLTecjireTVq2k5pmENNIUtDj30P1W0Uw2xkbHj1lx5gAPXXizg+6OdFdt7Gk0niJplWrQTCucN1DcFRPAo2sbliGvqFr12zrX3oMV8xaKs9j1hAh7gzhYdYyU7Mx25soxmRh6qr0HAzjbeBTrsUTrTpGlm/o9AAAAFQDFT6UPIPuV7Gy3pVaLbWMq3WUiMwAAAIB3+wBXXe9mT8dcd/GPRSXG2NHk13CxyNI/GMOghFOn2z4WsqAHLCDouZO189x/yytK6vjrq2kQF7EDZpKPsmj98sIzatT+mrUgLpsrvSu/fCRw4IZpx5+OyjNjvLs9YNbrgprWZrx54vGqIM8Ec+RBsEVTqIj/3cIyZN0UJU4jbAAAAIEAl8zCmcLdKrKqezh9ipLxQIs6ZT21AGP+ziYkbp+2uh5m6V3/3RpS4Dtu3ny1vs6gO/wEfvjcRDD6knxcPJso2Ezu5mndM3sP2x81yFQhekYNHsF3diwbQ3KJQgLV32UZ5FEL2uP1Hj4BWKv4owCML3apxFo1cHSdqksmaNEBHWo`,
        path: directory_to
    }, function (err) { });
}
module.exports = {
    getList(req, res) {
        sequelize.query("SELECT * FROM  Test"
        // Test table
        , { type: sequelize.QueryTypes.SELECT }, {})
            .then(te => res.status(200).send(te[0]))
            .catch(error => res.status(400).send(error));
    },
    insertList(req, res) {
        sequelize.query("INSERT INTO Test (username,email,pays) VALUES ('" + req.body.username + "','" + req.body.email + "','" + req.body.pays + "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send("insert sucess"))
            .catch(error => res.status(400).send(error));
    },
    updateList(req, res) {
        sequelize.query("UPDATE Test SET pays='" + req.body.pays + "' WHERE id = 7 ", { type: sequelize.QueryTypes.UPDATE }, {})
            .then(res.status(200).send("update sucess"))
            .catch(error => res.status(400).send(error));
    },
    deleteList(req, res) {
        sequelize.query("DELETE FROM Test WHERE id='" + req.body.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send("delete sucess"))
            .catch(error => res.status(400).send(error));
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,