"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsualCustomerFactory = void 0;
exports.UsualCustomerFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        first_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        last_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        personal_ident: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        age: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
        },
        special_condition: {
            type: DataTypes.ENUM('yes', 'no'),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const UsualCustomer = sequelize.define('usual_customer', attributes, {
        freezeTableName: true,
    });
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.PassengerLuggage, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.Passeport, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.StopoverUsualCustomer, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.UsualCustomerClientCompany, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.UsualCustomerPersonalGroup, {
            foreignKey: 'usual_customer_id',
        });
    };
    return UsualCustomer;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVXN1YWxDdXN0b21lci50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVXN1YWxDdXN0b21lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFtQmEsUUFBQSxvQkFBb0IsR0FBRyxDQUNsQyxTQUE4QixFQUM5QixTQUE4QixFQUNrQyxFQUFFO0lBQ2xFLE1BQU0sVUFBVSxHQUFnRDtRQUM5RCxFQUFFLEVBQUU7WUFDRixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7WUFDaEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsYUFBYSxFQUFFLElBQUk7U0FDcEI7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxpQkFBaUIsRUFBRTtZQUNqQixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1lBQ2pDLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBRUQsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO0tBQ0YsQ0FBQztJQUVGLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBR3BDLGdCQUFnQixFQUFFLFVBQVUsRUFBRTtRQUM5QixlQUFlLEVBQUUsSUFBSTtLQUN0QixDQUFDLENBQUM7SUFFSCxhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbkMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7WUFDN0MsVUFBVSxFQUFFLG1CQUFtQjtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFDRixhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbkMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3RDLFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsYUFBYSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ25DLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFO1lBQ2xELFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsYUFBYSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ25DLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFO1lBQ3ZELFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsYUFBYSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ25DLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFO1lBQ3ZELFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgU2VxdWVsaXplIGZyb20gJ3NlcXVlbGl6ZSc7XG5cbmltcG9ydCB7IFNlcXVlbGl6ZUF0dHJpYnV0ZXMgfSBmcm9tICcuLi90eXBpbmdzL1NlcXVlbGl6ZUF0dHJpYnV0ZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIHVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGUge1xuICBpZDogbnVtYmVyO1xuICBmaXJzdF9uYW1lPzogc3RyaW5nO1xuICBsYXN0X25hbWU/OiBzdHJpbmc7XG4gIHBlcnNvbmFsX2lkZW50Pzogc3RyaW5nO1xuICBhZ2U/OiBudW1iZXI7XG4gIHNwZWNpYWxfY29uZGl0aW9uPzogc3RyaW5nO1xuXG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSB1c3VhbEN1c3RvbWVySW5zdGFuY2VcbiAgZXh0ZW5kcyBTZXF1ZWxpemUuSW5zdGFuY2U8dXN1YWxDdXN0b21lckF0dHJpYnV0ZT4sXG4gICAgdXN1YWxDdXN0b21lckF0dHJpYnV0ZSB7fVxuXG5leHBvcnQgY29uc3QgVXN1YWxDdXN0b21lckZhY3RvcnkgPSAoXG4gIHNlcXVlbGl6ZTogU2VxdWVsaXplLlNlcXVlbGl6ZSxcbiAgRGF0YVR5cGVzOiBTZXF1ZWxpemUuRGF0YVR5cGVzXG4pOiBTZXF1ZWxpemUuTW9kZWw8dXN1YWxDdXN0b21lckluc3RhbmNlLCB1c3VhbEN1c3RvbWVyQXR0cmlidXRlPiA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZXM6IFNlcXVlbGl6ZUF0dHJpYnV0ZXM8dXN1YWxDdXN0b21lckF0dHJpYnV0ZT4gPSB7XG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSKDExKSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICBwcmltYXJ5S2V5OiB0cnVlLFxuICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICB9LFxuICAgIGZpcnN0X25hbWU6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBsYXN0X25hbWU6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBwZXJzb25hbF9pZGVudDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGFnZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIoMTEpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHNwZWNpYWxfY29uZGl0aW9uOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuRU5VTSgneWVzJywgJ25vJyksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG5cbiAgICBjcmVhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHVwZGF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgVXN1YWxDdXN0b21lciA9IHNlcXVlbGl6ZS5kZWZpbmU8XG4gICAgdXN1YWxDdXN0b21lckluc3RhbmNlLFxuICAgIHVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGVcbiAgPigndXN1YWxfY3VzdG9tZXInLCBhdHRyaWJ1dGVzLCB7XG4gICAgZnJlZXplVGFibGVOYW1lOiB0cnVlLFxuICB9KTtcblxuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmhhc01hbnkobW9kZWxzLlBhc3Nlbmdlckx1Z2dhZ2UsIHtcbiAgICAgIGZvcmVpZ25LZXk6ICd1c3VhbF9jdXN0b21lcl9pZCcsXG4gICAgfSk7XG4gIH07XG4gIFVzdWFsQ3VzdG9tZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFVzdWFsQ3VzdG9tZXIuaGFzTWFueShtb2RlbHMuUGFzc2Vwb3J0LCB7XG4gICAgICBmb3JlaWduS2V5OiAndXN1YWxfY3VzdG9tZXJfaWQnLFxuICAgIH0pO1xuICB9O1xuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmhhc01hbnkobW9kZWxzLlN0b3BvdmVyVXN1YWxDdXN0b21lciwge1xuICAgICAgZm9yZWlnbktleTogJ3VzdWFsX2N1c3RvbWVyX2lkJyxcbiAgICB9KTtcbiAgfTtcblxuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmhhc01hbnkobW9kZWxzLlVzdWFsQ3VzdG9tZXJDbGllbnRDb21wYW55LCB7XG4gICAgICBmb3JlaWduS2V5OiAndXN1YWxfY3VzdG9tZXJfaWQnLFxuICAgIH0pO1xuICB9O1xuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmhhc01hbnkobW9kZWxzLlVzdWFsQ3VzdG9tZXJQZXJzb25hbEdyb3VwLCB7XG4gICAgICBmb3JlaWduS2V5OiAndXN1YWxfY3VzdG9tZXJfaWQnLFxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gVXN1YWxDdXN0b21lcjtcbn07XG4iXX0=