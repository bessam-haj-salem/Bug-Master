"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const driver = db.Driver;
module.exports = {
    //insertion of a new company
    insertDriver(req, res) {
        sequelize
            .query("INSERT INTO driver (first_name, last_name, personal_ident, ref_drive_licence ) VALUES('" +
            req.body.first_name +
            "', '" +
            req.body.last_name +
            "','" +
            req.body.personal_ident +
            "', '" +
            req.body.ref_drive_licence +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('driver added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateDriver(req, res) {
        return driver
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((driver) => {
            if (!driver) {
                return res.status(200).send({
                    message: ' inexistant driver',
                });
            }
            else {
                return driver
                    .update({
                    first_name: req.body.first_name,
                    last_name: req.body.last_name,
                    personal_ident: req.body.personal_ident,
                    ref_drive_licence: req.body.ref_drive_licence,
                })
                    .then(() => res
                    .status(200)
                    .send(`${req.body.first_name} was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readDriver(req, res) {
        return driver
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((driver) => {
            if (!driver) {
                return res.status(200).send({
                    message: 'inexistant company',
                });
            }
            else {
                return res.status(200).send(driver);
            }
        });
    },
    // read client companies with pagination
    readDriverChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return driver
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((driver) => {
            if (!driver) {
                return res.status(200).send({
                    message: 'inexistant drivers',
                });
            }
            else {
                return res.status(200).send(driver);
            }
        });
    },
    deleteDriver(req, res) {
        sequelize
            .query("DELETE FROM driver WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('driver deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,