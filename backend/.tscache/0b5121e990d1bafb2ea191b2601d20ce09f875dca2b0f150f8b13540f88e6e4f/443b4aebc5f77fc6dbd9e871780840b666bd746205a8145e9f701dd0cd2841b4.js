"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassengerFactory = void 0;
exports.PassengerFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        first_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        last_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        personal_ident: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        age: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
        },
        special_condition: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const Passenger = sequelize.define('passenger', attributes, {
        freezeTableName: true,
    });
    // Passenger.associate = (models) => {
    //   Passenger.belongsTo(models.Trip, {
    //     //OK
    //     foreignKey: 'id',
    //   });
    // };
    Passenger.associate = (models) => {
        Passenger.belongsTo(models.PersonalGroup, {
            //OK
            foreignKey: 'id',
        });
    };
    Passenger.associate = (models) => {
        Passenger.belongsTo(models.ClientCompany, {
            //OK
            foreignKey: 'id',
        });
    };
    Passenger.associate = (models) => {
        Passenger.hasMany(models.PassengerLuggage, {
            foreignKey: 'passenger_id',
        });
    };
    Passenger.associate = (models) => {
        Passenger.hasMany(models.Passeport, {
            foreignKey: 'passenger_id',
        });
    };
    Passenger.associate = (models) => {
        Passenger.hasMany(models.Stopover, {
            foreignKey: 'passenger_id',
        });
    };
    Passenger.associate = (models) => {
        Passenger.hasMany(models.TripPassenger, {
            foreignKey: 'passenger_id',
        });
    };
    return Passenger;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvUGFzc2VuZ2VyLnRzIiwic291cmNlcyI6WyIvdmFyL3d3dy9odG1sL2FwaV90cmFuc2ZlcnMvc2VydmVyL21vZGVscy10cy9QYXNzZW5nZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBNkJhLFFBQUEsZ0JBQWdCLEdBQUcsQ0FDOUIsU0FBOEIsRUFDOUIsU0FBOEIsRUFDMEIsRUFBRTtJQUMxRCxNQUFNLFVBQVUsR0FBNEM7UUFDMUQsRUFBRSxFQUFFO1lBQ0YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGFBQWEsRUFBRSxJQUFJO1NBQ3BCO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsY0FBYyxFQUFFO1lBQ2QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsR0FBRyxFQUFFO1lBQ0gsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsaUJBQWlCLEVBQUU7WUFDakIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO0tBQ0YsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQ2hDLFdBQVcsRUFDWCxVQUFVLEVBQ1Y7UUFDRSxlQUFlLEVBQUUsSUFBSTtLQUN0QixDQUNGLENBQUM7SUFDRixzQ0FBc0M7SUFDdEMsdUNBQXVDO0lBQ3ZDLFdBQVc7SUFDWCx3QkFBd0I7SUFDeEIsUUFBUTtJQUNSLEtBQUs7SUFDTCxTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDL0IsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFO1lBQ3hDLElBQUk7WUFDSixVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRixTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDL0IsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFO1lBQ3hDLElBQUk7WUFDSixVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRixTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDL0IsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUU7WUFDekMsVUFBVSxFQUFFLGNBQWM7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsU0FBUyxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQy9CLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUNsQyxVQUFVLEVBQUUsY0FBYztTQUMzQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFDRixTQUFTLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDL0IsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ2pDLFVBQVUsRUFBRSxjQUFjO1NBQzNCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLFNBQVMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUMvQixTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDdEMsVUFBVSxFQUFFLGNBQWM7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgU2VxdWVsaXplIGZyb20gJ3NlcXVlbGl6ZSc7XG5cbmltcG9ydCB7IFNlcXVlbGl6ZUF0dHJpYnV0ZXMgfSBmcm9tICcuLi90eXBpbmdzL1NlcXVlbGl6ZUF0dHJpYnV0ZXMnO1xuLy90YWJsZSBob3RlbFxuXG5pbXBvcnQgeyBjbGllbnRDb21wYW55QXR0cmlidXRlLCBjbGllbnRDb21wYW55SW5zdGFuY2UgfSBmcm9tICcuL0NsaWVudENvbXBhbnknO1xuaW1wb3J0IHsgcGVyc29uYWxHcm91cEF0dHJpYnV0ZSwgcGVyc29uYWxHcm91cEluc3RhbmNlIH0gZnJvbSAnLi9QZXJzb25hbEdyb3VwJztcbmltcG9ydCB7IHRyaXBBdHRyaWJ1dGUsIHRyaXBJbnN0YW5jZSB9IGZyb20gJy4vVHJpcCc7XG5pbXBvcnQgeyBwYXNzZXBvcnRBdHRyaWJ1dGUsIHBhc3NlcG9ydEluc3RhbmNlIH0gZnJvbSAnLi9QYXNzZXBvcnQnO1xuaW1wb3J0IHtcbiAgcGFzc2VuZ2VyTHVnZ2FnZUF0dHJpYnV0ZSxcbiAgcGFzc2VuZ2VyTHVnZ2FnZUluc3RhbmNlLFxufSBmcm9tICcuL1Bhc3Nlbmdlckx1Z2dhZ2UnO1xuaW1wb3J0IHsgc3RvcG92ZXJBdHRyaWJ1dGUsIHN0b3BvdmVySW5zdGFuY2UgfSBmcm9tICcuL1N0b3BvdmVyJztcbmltcG9ydCB7IHRyaXBQYXNzZW5nZXJBdHRyaWJ1dGUsIHRyaXBQYXNzZW5nZXJJbnN0YW5jZSB9IGZyb20gJy4vVHJpcFBhc3Nlbmdlcic7XG5leHBvcnQgaW50ZXJmYWNlIHBhc3NlbmdlckF0dHJpYnV0ZSB7XG4gIGlkOiBudW1iZXI7XG4gIGZpcnN0X25hbWU/OiBzdHJpbmc7XG4gIGxhc3RfbmFtZT86IHN0cmluZztcbiAgcGVyc29uYWxfaWRlbnQ/OiBzdHJpbmc7XG4gIGFnZT86IG51bWJlcjtcbiAgc3BlY2lhbF9jb25kaXRpb24/OiBzdHJpbmc7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSBwYXNzZW5nZXJJbnN0YW5jZVxuICBleHRlbmRzIFNlcXVlbGl6ZS5JbnN0YW5jZTxwYXNzZW5nZXJBdHRyaWJ1dGU+LFxuICAgIHBhc3NlbmdlckF0dHJpYnV0ZSB7fVxuXG5leHBvcnQgY29uc3QgUGFzc2VuZ2VyRmFjdG9yeSA9IChcbiAgc2VxdWVsaXplOiBTZXF1ZWxpemUuU2VxdWVsaXplLFxuICBEYXRhVHlwZXM6IFNlcXVlbGl6ZS5EYXRhVHlwZXNcbik6IFNlcXVlbGl6ZS5Nb2RlbDxwYXNzZW5nZXJJbnN0YW5jZSwgcGFzc2VuZ2VyQXR0cmlidXRlPiA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZXM6IFNlcXVlbGl6ZUF0dHJpYnV0ZXM8cGFzc2VuZ2VyQXR0cmlidXRlPiA9IHtcbiAgICBpZDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIoMTEpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICAgIHByaW1hcnlLZXk6IHRydWUsXG4gICAgICBhdXRvSW5jcmVtZW50OiB0cnVlLFxuICAgIH0sXG4gICAgZmlyc3RfbmFtZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGxhc3RfbmFtZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHBlcnNvbmFsX2lkZW50OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgYWdlOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUigxMSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgc3BlY2lhbF9jb25kaXRpb246IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBjcmVhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHVwZGF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgUGFzc2VuZ2VyID0gc2VxdWVsaXplLmRlZmluZTxwYXNzZW5nZXJJbnN0YW5jZSwgcGFzc2VuZ2VyQXR0cmlidXRlPihcbiAgICAncGFzc2VuZ2VyJyxcbiAgICBhdHRyaWJ1dGVzLFxuICAgIHtcbiAgICAgIGZyZWV6ZVRhYmxlTmFtZTogdHJ1ZSxcbiAgICB9XG4gICk7XG4gIC8vIFBhc3Nlbmdlci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gIC8vICAgUGFzc2VuZ2VyLmJlbG9uZ3NUbyhtb2RlbHMuVHJpcCwge1xuICAvLyAgICAgLy9PS1xuICAvLyAgICAgZm9yZWlnbktleTogJ2lkJyxcbiAgLy8gICB9KTtcbiAgLy8gfTtcbiAgUGFzc2VuZ2VyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBQYXNzZW5nZXIuYmVsb25nc1RvKG1vZGVscy5QZXJzb25hbEdyb3VwLCB7XG4gICAgICAvL09LXG4gICAgICBmb3JlaWduS2V5OiAnaWQnLFxuICAgIH0pO1xuICB9O1xuXG4gIFBhc3Nlbmdlci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgUGFzc2VuZ2VyLmJlbG9uZ3NUbyhtb2RlbHMuQ2xpZW50Q29tcGFueSwge1xuICAgICAgLy9PS1xuICAgICAgZm9yZWlnbktleTogJ2lkJyxcbiAgICB9KTtcbiAgfTtcblxuICBQYXNzZW5nZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFBhc3Nlbmdlci5oYXNNYW55KG1vZGVscy5QYXNzZW5nZXJMdWdnYWdlLCB7XG4gICAgICBmb3JlaWduS2V5OiAncGFzc2VuZ2VyX2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgUGFzc2VuZ2VyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBQYXNzZW5nZXIuaGFzTWFueShtb2RlbHMuUGFzc2Vwb3J0LCB7XG4gICAgICBmb3JlaWduS2V5OiAncGFzc2VuZ2VyX2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgUGFzc2VuZ2VyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBQYXNzZW5nZXIuaGFzTWFueShtb2RlbHMuU3RvcG92ZXIsIHtcbiAgICAgIGZvcmVpZ25LZXk6ICdwYXNzZW5nZXJfaWQnLFxuICAgIH0pO1xuICB9O1xuICBQYXNzZW5nZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFBhc3Nlbmdlci5oYXNNYW55KG1vZGVscy5UcmlwUGFzc2VuZ2VyLCB7XG4gICAgICBmb3JlaWduS2V5OiAncGFzc2VuZ2VyX2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIFBhc3Nlbmdlcjtcbn07XG4iXX0=