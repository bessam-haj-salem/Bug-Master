"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const usualCustomerPersonalGroup = db.UsualCustomerPersonalGroup;
module.exports = {
    insertUsualCustomerPersonalGroup(req, res) {
        sequelize
            .query("INSERT INTO usual_customer_personal_group (usual_customer_id, personal_group_id  ) VALUES('" +
            req.body.usual_customer_id +
            "', '" +
            req.body.personal_group_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('usualCustomerPersonalGroup added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateUsualCustomerPersonalGroup(req, res) {
        return usualCustomerPersonalGroup
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((usualCustomerPersonalGroup) => {
            if (!usualCustomerPersonalGroup) {
                return res.status(200).send({
                    message: ' usualCustomerPersonalGroup inexistant ',
                });
            }
            else {
                return usualCustomerPersonalGroup
                    .update({
                    usual_customer_id: req.body.usual_customer_id,
                    personal_group_id: req.body.personal_group_id,
                })
                    .then(() => res
                    .status(200)
                    .send(`usualCustomerPersonalGroup updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readUsualCustomerPersonalGroup(req, res) {
        return usualCustomerPersonalGroup
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((usualCustomerPersonalGroup) => {
            if (!usualCustomerPersonalGroup) {
                return res.status(200).send({
                    message: 'usualCustomerPersonalGroup inexistant ',
                });
            }
            else {
                return res.status(200).send(usualCustomerPersonalGroup);
            }
        });
    },
    // read usualCustomerPersonalGroup with pagination
    readusualCustomerPersonalGroupChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return usualCustomerPersonalGroup
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((usualCustomerPersonalGroup) => {
            if (!usualCustomerPersonalGroup) {
                return res.status(200).send({
                    message: 'inexistant usualCustomerPersonalGroup',
                });
            }
            else {
                return res.status(200).send(usualCustomerPersonalGroup);
            }
        });
    },
    deleteUsualCustomerPersonalGroup(req, res) {
        sequelize
            .query("DELETE FROM usual_customer_personal_group WHERE id='" +
            req.params.id +
            "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('usualCustomerPersonalGroup deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,