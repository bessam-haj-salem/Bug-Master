"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const rentWithDriverUsualCustomer = db.RentWithDriverUsualCustomer;
module.exports = {
    //insertion of a new company
    insertRentWithDriverUsualCustomer(req, res) {
        sequelize
            .query("INSERT INTO rent_with_driver_usual_customer(ref, date_rent, hour_rent, date_prev_return,hour_prev_return,date_return,deposit,usual_customer_id ) VALUES('" +
            req.body.ref +
            "', '" +
            req.body.date_rent +
            "', '" +
            req.body.hour_rent +
            "', '" +
            req.body.date_prev_return +
            "', '" +
            req.body.hour_prev_return +
            "', '" +
            req.body.date_return +
            "', '" +
            req.body.deposit +
            "', '" +
            req.body.usual_customer_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('rent added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateRentWithDriverUsualCustomer(req, res) {
        return rentWithDriverUsualCustomer
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((rentWithDriverUsualCustomer) => {
            if (!rentWithDriverUsualCustomer) {
                return res.status(200).send({
                    message: ' inexistant rent',
                });
            }
            else {
                return rentWithDriverUsualCustomer
                    .update({
                    ref: req.body.ref,
                    date_rent: req.body.date_rent,
                    hour_rent: req.body.hour_rent,
                    date_prev_return: req.body.date_prev_return,
                    date_return: req.body.date_return,
                    deposit: req.body.deposit,
                    usual_customer_id: req.body.usual_customer_id,
                })
                    .then(() => res.status(200).send(`rent updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readRentWithDriverUsualCustomer(req, res) {
        return rentWithDriverUsualCustomer
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((rentWithDriverUsualCustomer) => {
            if (!rentWithDriverUsualCustomer) {
                return res.status(200).send({
                    message: 'inexistant rent',
                });
            }
            else {
                return res.status(200).send(rentWithDriverUsualCustomer);
            }
        });
    },
    deleteRentWithDriverUsualCustomer(req, res) {
        sequelize
            .query("DELETE FROM rent_with_driver_usual_customer  WHERE id='" +
            req.params.id +
            "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('rent deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,