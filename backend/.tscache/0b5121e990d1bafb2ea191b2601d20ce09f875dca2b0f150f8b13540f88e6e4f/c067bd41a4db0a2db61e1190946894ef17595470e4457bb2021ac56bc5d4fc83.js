"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TechnicalInspectionFactory = void 0;
exports.TechnicalInspectionFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        ref_ti: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        date_inspection: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        nature_inspection: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        observations: {
            type: DataTypes.TEXT,
            allowNull: false,
        },
        name_inspection_agency: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        ref_agreement: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        expiration_date: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        cost_ti: {
            type: DataTypes.DECIMAL(10, 3),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const TechnicalInspection = sequelize.define('technical_inspection', attributes, {
        freezeTableName: true,
    });
    TechnicalInspection.associate = (models) => {
        TechnicalInspection.belongsTo(models.VehiculeFleet, {
            foreignKey: 'id',
        });
    };
    return TechnicalInspection;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVGVjaG5pY2FsSW5zcGVjdGlvbi50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVGVjaG5pY2FsSW5zcGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUF1QmEsUUFBQSwwQkFBMEIsR0FBRyxDQUN4QyxTQUE4QixFQUM5QixTQUE4QixFQUk5QixFQUFFO0lBQ0YsTUFBTSxVQUFVLEdBQXNEO1FBQ3BFLEVBQUUsRUFBRTtZQUNGLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsSUFBSTtTQUNwQjtRQUNELE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGVBQWUsRUFBRTtZQUNmLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGlCQUFpQixFQUFFO1lBQ2pCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELHNCQUFzQixFQUFFO1lBQ3RCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGFBQWEsRUFBRTtZQUNiLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGVBQWUsRUFBRTtZQUNmLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDOUIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7S0FDRixDQUFDO0lBRUYsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUcxQyxzQkFBc0IsRUFBRSxVQUFVLEVBQUU7UUFDcEMsZUFBZSxFQUFFLElBQUk7S0FDdEIsQ0FBQyxDQUFDO0lBQ0gsbUJBQW1CLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDekMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDbEQsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsT0FBTyxtQkFBbUIsQ0FBQztBQUM3QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTZXF1ZWxpemUgZnJvbSAnc2VxdWVsaXplJztcblxuaW1wb3J0IHsgU2VxdWVsaXplQXR0cmlidXRlcyB9IGZyb20gJy4uL3R5cGluZ3MvU2VxdWVsaXplQXR0cmlidXRlcyc7XG4vL3RhYmxlIGhvdGVsXG5pbXBvcnQgeyB2ZWhpY3VsZUZsZWV0QXR0cmlidXRlLCB2ZWhpY3VsZUZsZWV0SW5zdGFuY2UgfSBmcm9tICcuL1ZlaGljdWxlRmxlZXQnO1xuZXhwb3J0IGludGVyZmFjZSB0ZWNobmljYWxJbnNwZWN0aW9uQXR0cmlidXRlIHtcbiAgaWQ6IG51bWJlcjtcbiAgcmVmX3RpPzogc3RyaW5nO1xuICBhZHJlc3M/OiBzdHJpbmc7XG4gIGRhdGVfaW5zcGVjdGlvbj86IERhdGU7XG4gIG5hdHVyZV9pbnNwZWN0aW9uPzogc3RyaW5nO1xuICBvYnNlcnZhdGlvbnM/OiBzdHJpbmc7XG4gIG5hbWVfaW5zcGVjdGlvbl9hZ2VuY3k/OiBzdHJpbmc7XG4gIHJlZl9hZ3JlZW1lbnQ/OiBzdHJpbmc7XG4gIGV4cGlyYXRpb25fZGF0ZT86IERhdGU7XG4gIGNvc3RfdGk/OiBudW1iZXI7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSB0ZWNobmljYWxJbnNwZWN0aW9uSW5zdGFuY2VcbiAgZXh0ZW5kcyBTZXF1ZWxpemUuSW5zdGFuY2U8dGVjaG5pY2FsSW5zcGVjdGlvbkF0dHJpYnV0ZT4sXG4gICAgdGVjaG5pY2FsSW5zcGVjdGlvbkF0dHJpYnV0ZSB7fVxuXG5leHBvcnQgY29uc3QgVGVjaG5pY2FsSW5zcGVjdGlvbkZhY3RvcnkgPSAoXG4gIHNlcXVlbGl6ZTogU2VxdWVsaXplLlNlcXVlbGl6ZSxcbiAgRGF0YVR5cGVzOiBTZXF1ZWxpemUuRGF0YVR5cGVzXG4pOiBTZXF1ZWxpemUuTW9kZWw8XG4gIHRlY2huaWNhbEluc3BlY3Rpb25JbnN0YW5jZSxcbiAgdGVjaG5pY2FsSW5zcGVjdGlvbkF0dHJpYnV0ZVxuPiA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZXM6IFNlcXVlbGl6ZUF0dHJpYnV0ZXM8dGVjaG5pY2FsSW5zcGVjdGlvbkF0dHJpYnV0ZT4gPSB7XG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSKDExKSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICBwcmltYXJ5S2V5OiB0cnVlLFxuICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICB9LFxuICAgIHJlZl90aToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGRhdGVfaW5zcGVjdGlvbjoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgbmF0dXJlX2luc3BlY3Rpb246IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBvYnNlcnZhdGlvbnM6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5URVhULFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIG5hbWVfaW5zcGVjdGlvbl9hZ2VuY3k6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICByZWZfYWdyZWVtZW50OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgZXhwaXJhdGlvbl9kYXRlOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBjb3N0X3RpOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREVDSU1BTCgxMCwgMyksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgY3JlYXRlZEF0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICB1cGRhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IFRlY2huaWNhbEluc3BlY3Rpb24gPSBzZXF1ZWxpemUuZGVmaW5lPFxuICAgIHRlY2huaWNhbEluc3BlY3Rpb25JbnN0YW5jZSxcbiAgICB0ZWNobmljYWxJbnNwZWN0aW9uQXR0cmlidXRlXG4gID4oJ3RlY2huaWNhbF9pbnNwZWN0aW9uJywgYXR0cmlidXRlcywge1xuICAgIGZyZWV6ZVRhYmxlTmFtZTogdHJ1ZSxcbiAgfSk7XG4gIFRlY2huaWNhbEluc3BlY3Rpb24uYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFRlY2huaWNhbEluc3BlY3Rpb24uYmVsb25nc1RvKG1vZGVscy5WZWhpY3VsZUZsZWV0LCB7XG4gICAgICBmb3JlaWduS2V5OiAnaWQnLFxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBUZWNobmljYWxJbnNwZWN0aW9uO1xufTtcbiJdfQ==