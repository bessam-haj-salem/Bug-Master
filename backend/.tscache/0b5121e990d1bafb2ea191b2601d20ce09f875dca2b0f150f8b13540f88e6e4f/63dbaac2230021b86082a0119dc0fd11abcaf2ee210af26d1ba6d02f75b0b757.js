"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TripFactory = void 0;
exports.TripFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        ref_trip: {
            type: DataTypes.STRING(255),
            allowNull: false,
            defaultValue: '',
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const Trip = sequelize.define('trip', attributes, {
        freezeTableName: true,
    });
    Trip.associate = (models) => {
        Trip.hasMany(models.TripDriver, {
            foreignKey: 'trip_id',
        });
    };
    Trip.associate = (models) => {
        Trip.hasMany(models.TripPassenger, {
            foreignKey: 'trip_id',
        });
    };
    Trip.associate = (models) => {
        Trip.hasMany(models.TripClientCompany, {
            foreignKey: 'trip_id',
        });
    };
    return Trip;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVHJpcC50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVHJpcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFxQmEsUUFBQSxXQUFXLEdBQUcsQ0FDekIsU0FBOEIsRUFDOUIsU0FBOEIsRUFDZ0IsRUFBRTtJQUNoRCxNQUFNLFVBQVUsR0FBdUM7UUFDckQsRUFBRSxFQUFFO1lBQ0YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGFBQWEsRUFBRSxJQUFJO1NBQ3BCO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFlBQVksRUFBRSxFQUFFO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO0tBQ0YsQ0FBQztJQUVGLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQzNCLE1BQU0sRUFDTixVQUFVLEVBQ1Y7UUFDRSxlQUFlLEVBQUUsSUFBSTtLQUN0QixDQUNGLENBQUM7SUFFRixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQzlCLFVBQVUsRUFBRSxTQUFTO1NBQ3RCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDakMsVUFBVSxFQUFFLFNBQVM7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFO1lBQ3JDLFVBQVUsRUFBRSxTQUFTO1NBQ3RCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgU2VxdWVsaXplIGZyb20gJ3NlcXVlbGl6ZSc7XG5cbmltcG9ydCB7IFNlcXVlbGl6ZUF0dHJpYnV0ZXMgfSBmcm9tICcuLi90eXBpbmdzL1NlcXVlbGl6ZUF0dHJpYnV0ZXMnO1xuLy90YWJsZSBob3RlbFxuaW1wb3J0IHsgdHJpcERyaXZlckF0dHJpYnV0ZSwgdHJpcERyaXZlckluc3RhbmNlIH0gZnJvbSAnLi9UcmlwRHJpdmVyJztcbmltcG9ydCB7IHRyaXBQYXNzZW5nZXJBdHRyaWJ1dGUsIHRyaXBQYXNzZW5nZXJJbnN0YW5jZSB9IGZyb20gJy4vVHJpcFBhc3Nlbmdlcic7XG5pbXBvcnQge1xuICB0cmlwQ2xpZW50Q29tcGFueUF0dHJpYnV0ZSxcbiAgdHJpcENsaWVudENvbXBhbnlJbnN0YW5jZSxcbn0gZnJvbSAnLi9UcmlwQ2xpZW50Q29tcGFueSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgdHJpcEF0dHJpYnV0ZSB7XG4gIGlkOiBudW1iZXI7XG4gIHJlZl90cmlwOiBzdHJpbmc7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSB0cmlwSW5zdGFuY2VcbiAgZXh0ZW5kcyBTZXF1ZWxpemUuSW5zdGFuY2U8dHJpcEF0dHJpYnV0ZT4sXG4gICAgdHJpcEF0dHJpYnV0ZSB7fVxuXG5leHBvcnQgY29uc3QgVHJpcEZhY3RvcnkgPSAoXG4gIHNlcXVlbGl6ZTogU2VxdWVsaXplLlNlcXVlbGl6ZSxcbiAgRGF0YVR5cGVzOiBTZXF1ZWxpemUuRGF0YVR5cGVzXG4pOiBTZXF1ZWxpemUuTW9kZWw8dHJpcEluc3RhbmNlLCB0cmlwQXR0cmlidXRlPiA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZXM6IFNlcXVlbGl6ZUF0dHJpYnV0ZXM8dHJpcEF0dHJpYnV0ZT4gPSB7XG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSKDExKSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICBwcmltYXJ5S2V5OiB0cnVlLFxuICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICB9LFxuICAgIHJlZl90cmlwOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgZGVmYXVsdFZhbHVlOiAnJyxcbiAgICB9LFxuICAgIGNyZWF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgdXBkYXRlZEF0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBUcmlwID0gc2VxdWVsaXplLmRlZmluZTx0cmlwSW5zdGFuY2UsIHRyaXBBdHRyaWJ1dGU+KFxuICAgICd0cmlwJyxcbiAgICBhdHRyaWJ1dGVzLFxuICAgIHtcbiAgICAgIGZyZWV6ZVRhYmxlTmFtZTogdHJ1ZSxcbiAgICB9XG4gICk7XG5cbiAgVHJpcC5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgVHJpcC5oYXNNYW55KG1vZGVscy5UcmlwRHJpdmVyLCB7XG4gICAgICBmb3JlaWduS2V5OiAndHJpcF9pZCcsXG4gICAgfSk7XG4gIH07XG4gIFRyaXAuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFRyaXAuaGFzTWFueShtb2RlbHMuVHJpcFBhc3Nlbmdlciwge1xuICAgICAgZm9yZWlnbktleTogJ3RyaXBfaWQnLFxuICAgIH0pO1xuICB9O1xuICBUcmlwLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBUcmlwLmhhc01hbnkobW9kZWxzLlRyaXBDbGllbnRDb21wYW55LCB7XG4gICAgICBmb3JlaWduS2V5OiAndHJpcF9pZCcsXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFRyaXA7XG59O1xuIl19