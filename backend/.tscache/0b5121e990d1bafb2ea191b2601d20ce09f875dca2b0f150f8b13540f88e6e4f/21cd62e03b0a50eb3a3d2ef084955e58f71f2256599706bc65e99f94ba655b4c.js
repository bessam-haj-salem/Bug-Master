"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VehiculeInsuranceFactory = void 0;
exports.VehiculeInsuranceFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        ref_insurance_contract: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        name_insurance_agency: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        date_begin: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        date_end: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        cost_insurance: {
            type: DataTypes.DECIMAL(10, 3),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const VehiculeInsurance = sequelize.define('vehicule_insurance', attributes, {
        freezeTableName: true,
    });
    VehiculeInsurance.associate = (models) => {
        VehiculeInsurance.belongsTo(models.VehiculeFleet, {
            foreignKey: 'id',
        });
    };
    return VehiculeInsurance;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVmVoaWN1bGVJbnN1cmFuY2UudHMiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvYXBpX3RyYW5zZmVycy9zZXJ2ZXIvbW9kZWxzLXRzL1ZlaGljdWxlSW5zdXJhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQW1CYSxRQUFBLHdCQUF3QixHQUFHLENBQ3RDLFNBQThCLEVBQzlCLFNBQThCLEVBQzBDLEVBQUU7SUFDMUUsTUFBTSxVQUFVLEdBQW9EO1FBQ2xFLEVBQUUsRUFBRTtZQUNGLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsSUFBSTtTQUNwQjtRQUNELHNCQUFzQixFQUFFO1lBQ3RCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELHFCQUFxQixFQUFFO1lBQ3JCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGNBQWMsRUFBRTtZQUNkLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDOUIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7S0FDRixDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUd4QyxvQkFBb0IsRUFBRSxVQUFVLEVBQUU7UUFDbEMsZUFBZSxFQUFFLElBQUk7S0FDdEIsQ0FBQyxDQUFDO0lBQ0gsaUJBQWlCLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDdkMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDaEQsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxpQkFBaUIsQ0FBQztBQUMzQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTZXF1ZWxpemUgZnJvbSAnc2VxdWVsaXplJztcblxuaW1wb3J0IHsgU2VxdWVsaXplQXR0cmlidXRlcyB9IGZyb20gJy4uL3R5cGluZ3MvU2VxdWVsaXplQXR0cmlidXRlcyc7XG4vL3RhYmxlIGhvdGVsXG5pbXBvcnQgeyB2ZWhpY3VsZUZsZWV0QXR0cmlidXRlLCB2ZWhpY3VsZUZsZWV0SW5zdGFuY2UgfSBmcm9tICcuL1ZlaGljdWxlRmxlZXQnO1xuZXhwb3J0IGludGVyZmFjZSB2ZWhpY3VsZUluc3VyYW5jZUF0dHJpYnV0ZSB7XG4gIGlkOiBudW1iZXI7XG4gIHJlZl9pbnN1cmFuY2VfY29udHJhY3Q/OiBzdHJpbmc7XG4gIG5hbWVfaW5zdXJhbmNlX2FnZW5jeT86IHN0cmluZztcbiAgZGF0ZV9iZWdpbj86IERhdGU7XG4gIGRhdGVfZW5kPzogRGF0ZTtcbiAgY29zdF9pbnN1cmFuY2U/OiBudW1iZXI7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSB2ZWhpY3VsZUluc3VyYW5jZUluc3RhbmNlXG4gIGV4dGVuZHMgU2VxdWVsaXplLkluc3RhbmNlPHZlaGljdWxlSW5zdXJhbmNlQXR0cmlidXRlPixcbiAgICB2ZWhpY3VsZUluc3VyYW5jZUF0dHJpYnV0ZSB7fVxuXG5leHBvcnQgY29uc3QgVmVoaWN1bGVJbnN1cmFuY2VGYWN0b3J5ID0gKFxuICBzZXF1ZWxpemU6IFNlcXVlbGl6ZS5TZXF1ZWxpemUsXG4gIERhdGFUeXBlczogU2VxdWVsaXplLkRhdGFUeXBlc1xuKTogU2VxdWVsaXplLk1vZGVsPHZlaGljdWxlSW5zdXJhbmNlSW5zdGFuY2UsIHZlaGljdWxlSW5zdXJhbmNlQXR0cmlidXRlPiA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZXM6IFNlcXVlbGl6ZUF0dHJpYnV0ZXM8dmVoaWN1bGVJbnN1cmFuY2VBdHRyaWJ1dGU+ID0ge1xuICAgIGlkOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUigxMSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgIGF1dG9JbmNyZW1lbnQ6IHRydWUsXG4gICAgfSxcbiAgICByZWZfaW5zdXJhbmNlX2NvbnRyYWN0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgbmFtZV9pbnN1cmFuY2VfYWdlbmN5OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgZGF0ZV9iZWdpbjoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgZGF0ZV9lbmQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGNvc3RfaW5zdXJhbmNlOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREVDSU1BTCgxMCwgMyksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgY3JlYXRlZEF0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICB1cGRhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IFZlaGljdWxlSW5zdXJhbmNlID0gc2VxdWVsaXplLmRlZmluZTxcbiAgICB2ZWhpY3VsZUluc3VyYW5jZUluc3RhbmNlLFxuICAgIHZlaGljdWxlSW5zdXJhbmNlQXR0cmlidXRlXG4gID4oJ3ZlaGljdWxlX2luc3VyYW5jZScsIGF0dHJpYnV0ZXMsIHtcbiAgICBmcmVlemVUYWJsZU5hbWU6IHRydWUsXG4gIH0pO1xuICBWZWhpY3VsZUluc3VyYW5jZS5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgVmVoaWN1bGVJbnN1cmFuY2UuYmVsb25nc1RvKG1vZGVscy5WZWhpY3VsZUZsZWV0LCB7XG4gICAgICBmb3JlaWduS2V5OiAnaWQnLFxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gVmVoaWN1bGVJbnN1cmFuY2U7XG59O1xuIl19