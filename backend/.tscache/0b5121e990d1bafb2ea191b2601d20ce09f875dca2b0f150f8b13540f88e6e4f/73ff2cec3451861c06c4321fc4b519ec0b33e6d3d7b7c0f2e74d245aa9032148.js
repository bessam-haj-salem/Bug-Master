"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const stopoverTrip = db.StopoverTrip;
module.exports = {
    insertStopoverTrip(req, res) {
        sequelize
            .query("INSERT INTO stopover_trip (adress, zone, time_and_date, city, country,km_from_departure,duration_hour_from_departure, trip_id ) VALUES('" +
            req.body.adress +
            "', '" +
            req.body.zone +
            "','" +
            req.body.time_and_date +
            "', '" +
            req.body.city +
            "', '" +
            req.body.country +
            "', '" +
            req.body.km_from_departure +
            "', '" +
            req.body.duration_hour_from_departure +
            "','" +
            req.body.trip_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('stopoverTrip added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateStopoverTrip(req, res) {
        return stopoverTrip
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((stopoverTrip) => {
            if (!stopoverTrip) {
                return res.status(200).send({
                    message: ' inexistant stopover Trip',
                });
            }
            else {
                return stopoverTrip
                    .update({
                    adress: req.body.adress,
                    zone: req.body.zone,
                    time_and_date: req.body.time_and_date,
                    country: req.body.country,
                    km_from_departure: req.body.km_from_departure,
                    duration_hour_from_departure: req.body.duration_hour_from_departure,
                    trip_id: req.body.trip_id,
                })
                    .then(() => res.status(200).send(`stopoverTrip was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readStopoverTrip(req, res) {
        return stopoverTrip
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((stopoverTrip) => {
            if (!stopoverTrip) {
                return res.status(200).send({
                    message: 'inexistant stopoverTrip',
                });
            }
            else {
                return res.status(200).send(stopoverTrip);
            }
        });
    },
    // read stopoverTrip with pagination
    readStopoverTripChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return stopoverTrip
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((stopoverTrip) => {
            if (!stopoverTrip) {
                return res.status(200).send({
                    message: 'inexistant stopover Trip',
                });
            }
            else {
                return res.status(200).send(stopoverTrip);
            }
        });
    },
    deleteStopoverTrip(req, res) {
        sequelize
            .query("DELETE FROM stopover_trip WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('stopoverTrip deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,