"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsualCustomerFactory = void 0;
exports.UsualCustomerFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        first_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        last_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        personal_ident: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        age: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
        },
        special_condition: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const UsualCustomer = sequelize.define('usual_customer', attributes, {
        freezeTableName: true,
    });
    // usualCustomer.associate = (models) => {
    //   usualCustomer.belongsTo(models.Trip, {
    //     //OK
    //     foreignKey: 'id',
    //   });
    // };
    UsualCustomer.associate = (models) => {
        UsualCustomer.belongsTo(models.PersonalGroup, {
            //OK
            foreignKey: 'id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.belongsTo(models.ClientCompany, {
            //OK
            foreignKey: 'id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.PassengerLuggage, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.Passeport, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.Stopover, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.TripPassenger, {
            foreignKey: 'usual_customer_id',
        });
    };
    return UsualCustomer;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVXN1YWxDdXN0b21lci50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVXN1YWxDdXN0b21lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFnQ2EsUUFBQSxvQkFBb0IsR0FBRyxDQUNsQyxTQUE4QixFQUM5QixTQUE4QixFQUNrQyxFQUFFO0lBQ2xFLE1BQU0sVUFBVSxHQUFnRDtRQUM5RCxFQUFFLEVBQUU7WUFDRixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7WUFDaEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsYUFBYSxFQUFFLElBQUk7U0FDcEI7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxpQkFBaUIsRUFBRTtZQUNqQixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7S0FDRixDQUFDO0lBRUYsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FHcEMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFO1FBQzlCLGVBQWUsRUFBRSxJQUFJO0tBQ3RCLENBQUMsQ0FBQztJQUNILDBDQUEwQztJQUMxQywyQ0FBMkM7SUFDM0MsV0FBVztJQUNYLHdCQUF3QjtJQUN4QixRQUFRO0lBQ1IsS0FBSztJQUNMLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDNUMsSUFBSTtZQUNKLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDNUMsSUFBSTtZQUNKLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtZQUM3QyxVQUFVLEVBQUUsbUJBQW1CO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDdEMsVUFBVSxFQUFFLG1CQUFtQjtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFDRixhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbkMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsYUFBYSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ25DLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtZQUMxQyxVQUFVLEVBQUUsbUJBQW1CO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLE9BQU8sYUFBYSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFNlcXVlbGl6ZSBmcm9tICdzZXF1ZWxpemUnO1xuXG5pbXBvcnQgeyBTZXF1ZWxpemVBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vdHlwaW5ncy9TZXF1ZWxpemVBdHRyaWJ1dGVzJztcbi8vdGFibGUgaG90ZWxcblxuaW1wb3J0IHsgY2xpZW50Q29tcGFueUF0dHJpYnV0ZSwgY2xpZW50Q29tcGFueUluc3RhbmNlIH0gZnJvbSAnLi9DbGllbnRDb21wYW55JztcbmltcG9ydCB7IHBlcnNvbmFsR3JvdXBBdHRyaWJ1dGUsIHBlcnNvbmFsR3JvdXBJbnN0YW5jZSB9IGZyb20gJy4vUGVyc29uYWxHcm91cCc7XG5pbXBvcnQgeyBwYXNzZXBvcnRBdHRyaWJ1dGUsIHBhc3NlcG9ydEluc3RhbmNlIH0gZnJvbSAnLi9QYXNzZXBvcnQnO1xuaW1wb3J0IHtcbiAgcGFzc2VuZ2VyTHVnZ2FnZUF0dHJpYnV0ZSxcbiAgcGFzc2VuZ2VyTHVnZ2FnZUluc3RhbmNlLFxufSBmcm9tICcuL1Bhc3Nlbmdlckx1Z2dhZ2UnO1xuaW1wb3J0IHsgc3RvcG92ZXJBdHRyaWJ1dGUsIHN0b3BvdmVySW5zdGFuY2UgfSBmcm9tICcuL1N0b3BvdmVyJztcbmltcG9ydCB7XG4gIHRyaXBVc3VhbEN1c3RvbWVyQXR0cmlidXRlLFxuICB0cmlwVXN1YWxDdXN0b21lckluc3RhbmNlLFxufSBmcm9tICcuL1RyaXBVc3VhbEN1c3RvbWVyJztcblxuZXhwb3J0IGludGVyZmFjZSB1c3VhbEN1c3RvbWVyQXR0cmlidXRlIHtcbiAgaWQ6IG51bWJlcjtcbiAgZmlyc3RfbmFtZT86IHN0cmluZztcbiAgbGFzdF9uYW1lPzogc3RyaW5nO1xuICBwZXJzb25hbF9pZGVudD86IHN0cmluZztcbiAgYWdlPzogbnVtYmVyO1xuICBzcGVjaWFsX2NvbmRpdGlvbj86IHN0cmluZztcbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIHVzdWFsQ3VzdG9tZXJJbnN0YW5jZVxuICBleHRlbmRzIFNlcXVlbGl6ZS5JbnN0YW5jZTx1c3VhbEN1c3RvbWVyQXR0cmlidXRlPixcbiAgICB1c3VhbEN1c3RvbWVyQXR0cmlidXRlIHt9XG5cbmV4cG9ydCBjb25zdCBVc3VhbEN1c3RvbWVyRmFjdG9yeSA9IChcbiAgc2VxdWVsaXplOiBTZXF1ZWxpemUuU2VxdWVsaXplLFxuICBEYXRhVHlwZXM6IFNlcXVlbGl6ZS5EYXRhVHlwZXNcbik6IFNlcXVlbGl6ZS5Nb2RlbDx1c3VhbEN1c3RvbWVySW5zdGFuY2UsIHVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGU+ID0+IHtcbiAgY29uc3QgYXR0cmlidXRlczogU2VxdWVsaXplQXR0cmlidXRlczx1c3VhbEN1c3RvbWVyQXR0cmlidXRlPiA9IHtcbiAgICBpZDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIoMTEpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICAgIHByaW1hcnlLZXk6IHRydWUsXG4gICAgICBhdXRvSW5jcmVtZW50OiB0cnVlLFxuICAgIH0sXG4gICAgZmlyc3RfbmFtZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGxhc3RfbmFtZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHBlcnNvbmFsX2lkZW50OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgYWdlOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUigxMSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgc3BlY2lhbF9jb25kaXRpb246IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBjcmVhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHVwZGF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgVXN1YWxDdXN0b21lciA9IHNlcXVlbGl6ZS5kZWZpbmU8XG4gICAgdXN1YWxDdXN0b21lckluc3RhbmNlLFxuICAgIHVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGVcbiAgPigndXN1YWxfY3VzdG9tZXInLCBhdHRyaWJ1dGVzLCB7XG4gICAgZnJlZXplVGFibGVOYW1lOiB0cnVlLFxuICB9KTtcbiAgLy8gdXN1YWxDdXN0b21lci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gIC8vICAgdXN1YWxDdXN0b21lci5iZWxvbmdzVG8obW9kZWxzLlRyaXAsIHtcbiAgLy8gICAgIC8vT0tcbiAgLy8gICAgIGZvcmVpZ25LZXk6ICdpZCcsXG4gIC8vICAgfSk7XG4gIC8vIH07XG4gIFVzdWFsQ3VzdG9tZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFVzdWFsQ3VzdG9tZXIuYmVsb25nc1RvKG1vZGVscy5QZXJzb25hbEdyb3VwLCB7XG4gICAgICAvL09LXG4gICAgICBmb3JlaWduS2V5OiAnaWQnLFxuICAgIH0pO1xuICB9O1xuXG4gIFVzdWFsQ3VzdG9tZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFVzdWFsQ3VzdG9tZXIuYmVsb25nc1RvKG1vZGVscy5DbGllbnRDb21wYW55LCB7XG4gICAgICAvL09LXG4gICAgICBmb3JlaWduS2V5OiAnaWQnLFxuICAgIH0pO1xuICB9O1xuXG4gIFVzdWFsQ3VzdG9tZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFVzdWFsQ3VzdG9tZXIuaGFzTWFueShtb2RlbHMuUGFzc2VuZ2VyTHVnZ2FnZSwge1xuICAgICAgZm9yZWlnbktleTogJ3VzdWFsX2N1c3RvbWVyX2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgVXN1YWxDdXN0b21lci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgVXN1YWxDdXN0b21lci5oYXNNYW55KG1vZGVscy5QYXNzZXBvcnQsIHtcbiAgICAgIGZvcmVpZ25LZXk6ICd1c3VhbF9jdXN0b21lcl9pZCcsXG4gICAgfSk7XG4gIH07XG4gIFVzdWFsQ3VzdG9tZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFVzdWFsQ3VzdG9tZXIuaGFzTWFueShtb2RlbHMuU3RvcG92ZXIsIHtcbiAgICAgIGZvcmVpZ25LZXk6ICd1c3VhbF9jdXN0b21lcl9pZCcsXG4gICAgfSk7XG4gIH07XG4gIFVzdWFsQ3VzdG9tZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFVzdWFsQ3VzdG9tZXIuaGFzTWFueShtb2RlbHMuVHJpcFBhc3Nlbmdlciwge1xuICAgICAgZm9yZWlnbktleTogJ3VzdWFsX2N1c3RvbWVyX2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIFVzdWFsQ3VzdG9tZXI7XG59O1xuIl19