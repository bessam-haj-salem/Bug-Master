"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const clientCompany = db.ClientCompany;
module.exports = {
    //insertion of a new company
    insertClient(req, res) {
        sequelize
            .query("INSERT INTO client_company (company_name, adress, commercial_register, patent_ref, email,logo,phone_number, name_person_in_charge,phone_person_in_charge, password,debt ,trade_margin_id ) VALUES('" +
            req.body.company_name +
            "', '" +
            req.body.adress +
            "','" +
            req.body.commercial_register +
            "', '" +
            req.body.patent_ref +
            "', '" +
            req.body.email +
            "', '" +
            req.body.logo +
            "','" +
            req.body.phone_number +
            "', '" +
            req.body.name_person_in_charge +
            "', '" +
            req.body.phone_person_in_charge +
            "','" +
            req.body.password +
            "', '" +
            req.body.debt +
            "', '" +
            req.body.trade_margin_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('company added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateClient(req, res) {
        return clientCompany
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((clientCompany) => {
            if (!clientCompany) {
                return res.status(200).send({
                    message: ' inexistant company',
                });
            }
            else {
                return clientCompany
                    .update({
                    company_name: req.body.company_name,
                    adress: req.body.adress,
                    commercial_register: req.body.commercial_register,
                    patent_ref: req.body.patent_ref,
                    email: req.body.email,
                    logo: req.body.logo,
                    phone_number: req.body.phone_number,
                    name_person_in_charge: req.body.name_person_in_charge,
                    phone_person_in_charge: req.body.phone_person_in_charge,
                    password: req.body.password,
                    debt: req.body.debt,
                    trade_margin_id: req.body.trade_margin_id,
                })
                    .then(() => res
                    .status(200)
                    .send(`${req.body.company_name} was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readClient(req, res) {
        return clientCompany
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((clientCompany) => {
            if (!clientCompany) {
                return res.status(200).send({
                    message: 'inexistant company',
                });
            }
            else {
                return res.status(200).send(clientCompany);
            }
        });
    },
    // read client companies with pagination
    readClientCompanyChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return clientCompany
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((clientCompany) => {
            if (!clientCompany) {
                return res.status(200).send({
                    message: 'inexistant client Company',
                });
            }
            else {
                return res.status(200).send(clientCompany);
            }
        });
    },
    deleteClient(req, res) {
        sequelize
            .query("DELETE FROM client_company WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('company deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,