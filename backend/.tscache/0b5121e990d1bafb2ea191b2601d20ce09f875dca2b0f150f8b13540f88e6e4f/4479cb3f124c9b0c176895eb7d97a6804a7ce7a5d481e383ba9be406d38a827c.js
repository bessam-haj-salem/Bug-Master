"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TechnicalInspectionFactory = void 0;
exports.TechnicalInspectionFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        ref_ti: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        date_inspection: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        nature_inspection: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        observations: {
            type: DataTypes.TEXT,
            allowNull: false,
        },
        name_inspection_agency: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        ref_agreement: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        expiration_date: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        cost_ti: {
            type: DataTypes.DECIMAL(10, 3),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const TechnicalInspection = sequelize.define('technical_inspection', attributes, {
        freezeTableName: true,
    });
    TechnicalInspection.associate = (models) => {
        TechnicalInspection.belongsTo(models.VehiculeFleet, {
            foreignKey: 'id',
        });
    };
    return TechnicalInspection;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVGVjaG5pY2FsSW5zcGVjdGlvbi50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVGVjaG5pY2FsSW5zcGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFzQmEsUUFBQSwwQkFBMEIsR0FBRyxDQUN4QyxTQUE4QixFQUM5QixTQUE4QixFQUk5QixFQUFFO0lBQ0YsTUFBTSxVQUFVLEdBQXNEO1FBQ3BFLEVBQUUsRUFBRTtZQUNGLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsSUFBSTtTQUNwQjtRQUNELE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGVBQWUsRUFBRTtZQUNmLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGlCQUFpQixFQUFFO1lBQ2pCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELFlBQVksRUFBRTtZQUNaLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELHNCQUFzQixFQUFFO1lBQ3RCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGFBQWEsRUFBRTtZQUNiLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGVBQWUsRUFBRTtZQUNmLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELE9BQU8sRUFBRTtZQUNQLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDOUIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7S0FDRixDQUFDO0lBRUYsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUcxQyxzQkFBc0IsRUFBRSxVQUFVLEVBQUU7UUFDcEMsZUFBZSxFQUFFLElBQUk7S0FDdEIsQ0FBQyxDQUFDO0lBQ0gsbUJBQW1CLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDekMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDbEQsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsT0FBTyxtQkFBbUIsQ0FBQztBQUM3QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTZXF1ZWxpemUgZnJvbSAnc2VxdWVsaXplJztcblxuaW1wb3J0IHsgU2VxdWVsaXplQXR0cmlidXRlcyB9IGZyb20gJy4uL3R5cGluZ3MvU2VxdWVsaXplQXR0cmlidXRlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgdGVjaG5pY2FsSW5zcGVjdGlvbkF0dHJpYnV0ZSB7XG4gIGlkOiBudW1iZXI7XG4gIHJlZl90aT86IHN0cmluZztcbiAgYWRyZXNzPzogc3RyaW5nO1xuICBkYXRlX2luc3BlY3Rpb24/OiBEYXRlO1xuICBuYXR1cmVfaW5zcGVjdGlvbj86IHN0cmluZztcbiAgb2JzZXJ2YXRpb25zPzogc3RyaW5nO1xuICBuYW1lX2luc3BlY3Rpb25fYWdlbmN5Pzogc3RyaW5nO1xuICByZWZfYWdyZWVtZW50Pzogc3RyaW5nO1xuICBleHBpcmF0aW9uX2RhdGU/OiBEYXRlO1xuICBjb3N0X3RpPzogbnVtYmVyO1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIHVwZGF0ZWRBdDogRGF0ZTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgdGVjaG5pY2FsSW5zcGVjdGlvbkluc3RhbmNlXG4gIGV4dGVuZHMgU2VxdWVsaXplLkluc3RhbmNlPHRlY2huaWNhbEluc3BlY3Rpb25BdHRyaWJ1dGU+LFxuICAgIHRlY2huaWNhbEluc3BlY3Rpb25BdHRyaWJ1dGUge31cblxuZXhwb3J0IGNvbnN0IFRlY2huaWNhbEluc3BlY3Rpb25GYWN0b3J5ID0gKFxuICBzZXF1ZWxpemU6IFNlcXVlbGl6ZS5TZXF1ZWxpemUsXG4gIERhdGFUeXBlczogU2VxdWVsaXplLkRhdGFUeXBlc1xuKTogU2VxdWVsaXplLk1vZGVsPFxuICB0ZWNobmljYWxJbnNwZWN0aW9uSW5zdGFuY2UsXG4gIHRlY2huaWNhbEluc3BlY3Rpb25BdHRyaWJ1dGVcbj4gPT4ge1xuICBjb25zdCBhdHRyaWJ1dGVzOiBTZXF1ZWxpemVBdHRyaWJ1dGVzPHRlY2huaWNhbEluc3BlY3Rpb25BdHRyaWJ1dGU+ID0ge1xuICAgIGlkOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUigxMSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgIGF1dG9JbmNyZW1lbnQ6IHRydWUsXG4gICAgfSxcbiAgICByZWZfdGk6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBkYXRlX2luc3BlY3Rpb246IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIG5hdHVyZV9pbnNwZWN0aW9uOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgb2JzZXJ2YXRpb25zOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuVEVYVCxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBuYW1lX2luc3BlY3Rpb25fYWdlbmN5OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgcmVmX2FncmVlbWVudDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGV4cGlyYXRpb25fZGF0ZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgY29zdF90aToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwoMTAsIDMpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGNyZWF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgdXBkYXRlZEF0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBUZWNobmljYWxJbnNwZWN0aW9uID0gc2VxdWVsaXplLmRlZmluZTxcbiAgICB0ZWNobmljYWxJbnNwZWN0aW9uSW5zdGFuY2UsXG4gICAgdGVjaG5pY2FsSW5zcGVjdGlvbkF0dHJpYnV0ZVxuICA+KCd0ZWNobmljYWxfaW5zcGVjdGlvbicsIGF0dHJpYnV0ZXMsIHtcbiAgICBmcmVlemVUYWJsZU5hbWU6IHRydWUsXG4gIH0pO1xuICBUZWNobmljYWxJbnNwZWN0aW9uLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBUZWNobmljYWxJbnNwZWN0aW9uLmJlbG9uZ3NUbyhtb2RlbHMuVmVoaWN1bGVGbGVldCwge1xuICAgICAgZm9yZWlnbktleTogJ2lkJyxcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVGVjaG5pY2FsSW5zcGVjdGlvbjtcbn07XG4iXX0=