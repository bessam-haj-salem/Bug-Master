"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VehiculeInsuranceFactory = void 0;
exports.VehiculeInsuranceFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        ref_insurance_contract: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        name_insurance_agency: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        date_begin: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        date_end: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        cost_insurance: {
            type: DataTypes.DECIMAL(10, 3),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const VehiculeInsurance = sequelize.define('vehicule_insurance', attributes, {
        freezeTableName: true,
    });
    VehiculeInsurance.associate = (models) => {
        VehiculeInsurance.belongsTo(models.VehiculeFleet, {
            foreignKey: 'id',
        });
    };
    return VehiculeInsurance;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVmVoaWN1bGVJbnN1cmFuY2UudHMiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvYXBpX3RyYW5zZmVycy9zZXJ2ZXIvbW9kZWxzLXRzL1ZlaGljdWxlSW5zdXJhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWlCYSxRQUFBLHdCQUF3QixHQUFHLENBQ3RDLFNBQThCLEVBQzlCLFNBQThCLEVBQzBDLEVBQUU7SUFDMUUsTUFBTSxVQUFVLEdBQW9EO1FBQ2xFLEVBQUUsRUFBRTtZQUNGLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsSUFBSTtTQUNwQjtRQUNELHNCQUFzQixFQUFFO1lBQ3RCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELHFCQUFxQixFQUFFO1lBQ3JCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsS0FBSztTQUNqQjtRQUNELGNBQWMsRUFBRTtZQUNkLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDOUIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7S0FDRixDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUd4QyxvQkFBb0IsRUFBRSxVQUFVLEVBQUU7UUFDbEMsZUFBZSxFQUFFLElBQUk7S0FDdEIsQ0FBQyxDQUFDO0lBQ0gsaUJBQWlCLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDdkMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDaEQsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxpQkFBaUIsQ0FBQztBQUMzQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTZXF1ZWxpemUgZnJvbSAnc2VxdWVsaXplJztcblxuaW1wb3J0IHsgU2VxdWVsaXplQXR0cmlidXRlcyB9IGZyb20gJy4uL3R5cGluZ3MvU2VxdWVsaXplQXR0cmlidXRlcyc7XG5leHBvcnQgaW50ZXJmYWNlIHZlaGljdWxlSW5zdXJhbmNlQXR0cmlidXRlIHtcbiAgaWQ6IG51bWJlcjtcbiAgcmVmX2luc3VyYW5jZV9jb250cmFjdD86IHN0cmluZztcbiAgbmFtZV9pbnN1cmFuY2VfYWdlbmN5Pzogc3RyaW5nO1xuICBkYXRlX2JlZ2luPzogRGF0ZTtcbiAgZGF0ZV9lbmQ/OiBEYXRlO1xuICBjb3N0X2luc3VyYW5jZT86IG51bWJlcjtcbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIHZlaGljdWxlSW5zdXJhbmNlSW5zdGFuY2VcbiAgZXh0ZW5kcyBTZXF1ZWxpemUuSW5zdGFuY2U8dmVoaWN1bGVJbnN1cmFuY2VBdHRyaWJ1dGU+LFxuICAgIHZlaGljdWxlSW5zdXJhbmNlQXR0cmlidXRlIHt9XG5cbmV4cG9ydCBjb25zdCBWZWhpY3VsZUluc3VyYW5jZUZhY3RvcnkgPSAoXG4gIHNlcXVlbGl6ZTogU2VxdWVsaXplLlNlcXVlbGl6ZSxcbiAgRGF0YVR5cGVzOiBTZXF1ZWxpemUuRGF0YVR5cGVzXG4pOiBTZXF1ZWxpemUuTW9kZWw8dmVoaWN1bGVJbnN1cmFuY2VJbnN0YW5jZSwgdmVoaWN1bGVJbnN1cmFuY2VBdHRyaWJ1dGU+ID0+IHtcbiAgY29uc3QgYXR0cmlidXRlczogU2VxdWVsaXplQXR0cmlidXRlczx2ZWhpY3VsZUluc3VyYW5jZUF0dHJpYnV0ZT4gPSB7XG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSKDExKSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICBwcmltYXJ5S2V5OiB0cnVlLFxuICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICB9LFxuICAgIHJlZl9pbnN1cmFuY2VfY29udHJhY3Q6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBuYW1lX2luc3VyYW5jZV9hZ2VuY3k6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBkYXRlX2JlZ2luOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBkYXRlX2VuZDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgY29zdF9pbnN1cmFuY2U6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5ERUNJTUFMKDEwLCAzKSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBjcmVhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHVwZGF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgVmVoaWN1bGVJbnN1cmFuY2UgPSBzZXF1ZWxpemUuZGVmaW5lPFxuICAgIHZlaGljdWxlSW5zdXJhbmNlSW5zdGFuY2UsXG4gICAgdmVoaWN1bGVJbnN1cmFuY2VBdHRyaWJ1dGVcbiAgPigndmVoaWN1bGVfaW5zdXJhbmNlJywgYXR0cmlidXRlcywge1xuICAgIGZyZWV6ZVRhYmxlTmFtZTogdHJ1ZSxcbiAgfSk7XG4gIFZlaGljdWxlSW5zdXJhbmNlLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBWZWhpY3VsZUluc3VyYW5jZS5iZWxvbmdzVG8obW9kZWxzLlZlaGljdWxlRmxlZXQsIHtcbiAgICAgIGZvcmVpZ25LZXk6ICdpZCcsXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBWZWhpY3VsZUluc3VyYW5jZTtcbn07XG4iXX0=