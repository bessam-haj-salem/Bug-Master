"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const passeport = db.Passeport;
module.exports = {
    //insertion of a new company
    insertPasseport(req, res) {
        sequelize
            .query("INSERT INTO passeport (passeport_ident, expiration_date, usual_customer_id) VALUES('" +
            req.body.passeport_ident +
            "', '" +
            req.body.expiration_date +
            "','" +
            req.body.usual_customer_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('passeport added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updatePasseport(req, res) {
        return passeport
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((passeport) => {
            if (!passeport) {
                return res.status(200).send({
                    message: ' inexistant passeport',
                });
            }
            else {
                return passeport
                    .update({
                    passeport_ident: req.body.passeport_ident,
                    expiration_date: req.body.expiration_date,
                    usual_customer_id: req.body.usual_customer_id,
                })
                    .then(() => res
                    .status(200)
                    .send(`${req.body.passeport_ident} was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readPasseport(req, res) {
        return passeport
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((passeport) => {
            if (!passeport) {
                return res.status(200).send({
                    message: 'inexistant passeport',
                });
            }
            else {
                return res.status(200).send(passeport);
            }
        });
    },
    // read passeport with pagination
    readPasseportChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return passeport
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((passeport) => {
            if (!passeport) {
                return res.status(200).send({
                    message: 'inexistant passeport',
                });
            }
            else {
                return res.status(200).send(passeport);
            }
        });
    },
    deletePasseport(req, res) {
        sequelize
            .query("DELETE FROM passeport WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('passeport deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,