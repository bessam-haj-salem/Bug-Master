"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const personalGroup = db.PersonalGroup;
module.exports = {
    //insertion of a new company
    insertPersonalGroup(req, res) {
        sequelize
            .query("INSERT INTO personal_group (group_name, group_number) VALUES('" +
            req.body.group_name +
            "', '" +
            req.body.group_number +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('personalGroup added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updatePersonalGroup(req, res) {
        return personalGroup
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((personalGroup) => {
            if (!personalGroup) {
                return res.status(200).send({
                    message: ' inexistant personalGroup',
                });
            }
            else {
                return personalGroup
                    .update({
                    group_name: req.body.group_name,
                    group_number: req.body.group_number,
                })
                    .then(() => res
                    .status(200)
                    .send(`${req.body.group_name} was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readPersonalGroup(req, res) {
        return personalGroup
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((personalGroup) => {
            if (!personalGroup) {
                return res.status(200).send({
                    message: 'inexistant personal group',
                });
            }
            else {
                return res.status(200).send(personalGroup);
            }
        });
    },
    // read personalGroup with pagination
    readPersonalGroupChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return personalGroup
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((personalGroup) => {
            if (!personalGroup) {
                return res.status(200).send({
                    message: 'inexistant personal Group',
                });
            }
            else {
                return res.status(200).send(personalGroup);
            }
        });
    },
    deletePersonalGroup(req, res) {
        sequelize
            .query("DELETE FROM personal_group WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('personal group deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,