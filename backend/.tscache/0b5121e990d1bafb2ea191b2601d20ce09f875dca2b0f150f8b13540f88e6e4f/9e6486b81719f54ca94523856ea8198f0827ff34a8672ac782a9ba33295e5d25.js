"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const stopoverTrip = db.StopoverTrip;
module.exports = {
    insertStopoverTrip(req, res) {
        sequelize
            .query("INSERT INTO stopover_trip (adress, zone, time_and_date, city, country,km_from_departure,duration_hour_from_departure, trip_id ) VALUES('" +
            req.body.adress +
            "', '" +
            req.body.zone +
            "','" +
            req.body.time_and_date +
            "', '" +
            req.body.city +
            "', '" +
            req.body.country +
            "', '" +
            req.body.km_from_departure +
            "', '" +
            req.body.duration_hour_from_departure +
            "','" +
            req.body.trip_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('stopoverTrip added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateStopoverTrip(req, res) {
        return stopoverTrip
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((stopoverTrip) => {
            if (!stopoverTrip) {
                return res.status(200).send({
                    message: ' inexistant stopover Trip',
                });
            }
            else {
                return stopoverTrip
                    .update({
                    adress: req.body.adress,
                    zone: req.body.zone,
                    time_and_date: req.body.time_and_date,
                    country: req.body.country,
                    km_from_departure: req.body.km_from_departure,
                    duration_hour_from_departure: req.body.duration_hour_from_departure,
                    trip_id: req.body.trip_id,
                })
                    .then(() => res.status(200).send(`stopoverTrip was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readStopoverTrip(req, res) {
        return stopoverTrip
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((stopoverTrip) => {
            if (!stopoverTrip) {
                return res.status(200).send({
                    message: 'inexistant stopoverTrip',
                });
            }
            else {
                return res.status(200).send(stopoverTrip);
            }
        });
    },
    deleteStopoverTrip(req, res) {
        sequelize
            .query("DELETE FROM stopover_trip WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('stopoverTrip deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9jb250cm9sbGVycy9zdG9wb3ZlclRyaXAudHMiLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvYXBpX3RyYW5zZmVycy9zZXJ2ZXIvY29udHJvbGxlcnMvc3RvcG92ZXJUcmlwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDbEUsNENBQTRDO0FBRTVDLE1BQU0sRUFBRSxHQUFHLHdCQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFekMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztBQUUvQixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFDZixrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRztRQUN6QixTQUFTO2FBQ04sS0FBSyxDQUNKLDBJQUEwSTtZQUN4SSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU07WUFDZixNQUFNO1lBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQ2IsS0FBSztZQUNMLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYTtZQUN0QixNQUFNO1lBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQ2IsTUFBTTtZQUNOLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTztZQUNoQixNQUFNO1lBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUI7WUFDMUIsTUFBTTtZQUNOLEdBQUcsQ0FBQyxJQUFJLENBQUMsNEJBQTRCO1lBQ3JDLEtBQUs7WUFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDaEIsSUFBSSxFQUVOLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLEVBQ3JDLEVBQUUsQ0FDSDthQUNBLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdB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Q0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsQ0FBQzthQUMvRCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXF1ZWxpemUsIFF1ZXJ5VHlwZXMgfSBmcm9tICdzZXF1ZWxpemUnO1xuY29uc3Qgc2VxdWVsaXplQ29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnL3NlcXVlbGl6ZUNvbmZpZy5qc29uJyk7XG5pbXBvcnQgeyBjcmVhdGVNb2RlbHMgfSBmcm9tICcuLi9tb2RlbHMtdHMnO1xuaW1wb3J0IHsgU3RvcG92ZXJUcmlwRmFjdG9yeSB9IGZyb20gJy4uL21vZGVscy10cy9TdG9wb3ZlclRyaXAnO1xuY29uc3QgZGIgPSBjcmVhdGVNb2RlbHMoc2VxdWVsaXplQ29uZmlnKTtcblxuY29uc3Qgc2VxdWVsaXplID0gZGIuc2VxdWVsaXplO1xuXG5jb25zdCBzdG9wb3ZlclRyaXAgPSBkYi5TdG9wb3ZlclRyaXA7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbnNlcnRTdG9wb3ZlclRyaXAocmVxLCByZXMpIHtcbiAgICBzZXF1ZWxpemVcbiAgICAgIC5xdWVyeShcbiAgICAgICAgXCJJTlNFUlQgSU5UTyBzdG9wb3Zlcl90cmlwIChhZHJlc3MsIHpvbmUsIHRpbWVfYW5kX2RhdGUsIGNpdHksIGNvdW50cnksa21fZnJvbV9kZXBhcnR1cmUsZHVyYXRpb25faG91cl9mcm9tX2RlcGFydHVyZSwgdHJpcF9pZCApIFZBTFVFUygnXCIgK1xuICAgICAgICAgIHJlcS5ib2R5LmFkcmVzcyArXG4gICAgICAgICAgXCInLCAnXCIgK1xuICAgICAgICAgIHJlcS5ib2R5LnpvbmUgK1xuICAgICAgICAgIFwiJywnXCIgK1xuICAgICAgICAgIHJlcS5ib2R5LnRpbWVfYW5kX2RhdGUgK1xuICAgICAgICAgIFwiJywgJ1wiICtcbiAgICAgICAgICByZXEuYm9keS5jaXR5ICtcbiAgICAgICAgICBcIicsICdcIiArXG4gICAgICAgICAgcmVxLmJvZHkuY291bnRyeSArXG4gICAgICAgICAgXCInLCAnXCIgK1xuICAgICAgICAgIHJlcS5ib2R5LmttX2Zyb21fZGVwYXJ0dXJlICtcbiAgICAgICAgICBcIicsICdcIiArXG4gICAgICAgICAgcmVxLmJvZHkuZHVyYXRpb25faG91cl9mcm9tX2RlcGFydHVyZSArXG4gICAgICAgICAgXCInLCdcIiArXG4gICAgICAgICAgcmVxLmJvZHkudHJpcF9pZCArXG4gICAgICAgICAgXCInKVwiLFxuXG4gICAgICAgIHsgdHlwZTogc2VxdWVsaXplLlF1ZXJ5VHlwZXMuSU5TRVJUIH0sXG4gICAgICAgIHt9XG4gICAgICApXG4gICAgICAudGhlbihyZXMuc3RhdHVzKDIwMCkuc2VuZCgnc3RvcG92ZXJUcmlwIGFkZGVkIHN1Y2Nlc3NmdWxseScpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4gcmVzLnN0YXR1cyg0MDApLnNlbmQoZXJyb3IpKTtcbiAgfSxcbiAgdXBkYXRlU3RvcG92ZXJUcmlwKHJlcSwgcmVzKSB7XG4gICAgcmV0dXJuIHN0b3BvdmVyVHJpcFxuICAgICAgLmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyBpZDogcmVxLnBhcmFtcy5pZCB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIH0pXG4gICAgICAudGhlbigoc3RvcG92ZXJUcmlwKSA9PiB7XG4gICAgICAgIGlmICghc3RvcG92ZXJUcmlwKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICcgaW5leGlzdGFudCBzdG9wb3ZlciBUcmlwJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc3RvcG92ZXJUcmlwXG4gICAgICAgICAgICAudXBkYXRlKHtcbiAgICAgICAgICAgICAgYWRyZXNzOiByZXEuYm9keS5hZHJlc3MsXG4gICAgICAgICAgICAgIHpvbmU6IHJlcS5ib2R5LnpvbmUsXG4gICAgICAgICAgICAgIHRpbWVfYW5kX2RhdGU6IHJlcS5ib2R5LnRpbWVfYW5kX2RhdGUsXG4gICAgICAgICAgICAgIGNvdW50cnk6IHJlcS5ib2R5LmNvdW50cnksXG4gICAgICAgICAgICAgIGttX2Zyb21fZGVwYXJ0dXJlOiByZXEuYm9keS5rbV9mcm9tX2RlcGFydHVyZSxcbiAgICAgICAgICAgICAgZHVyYXRpb25faG91cl9mcm9tX2RlcGFydHVyZTpcbiAgICAgICAgICAgICAgICByZXEuYm9keS5kdXJhdGlvbl9ob3VyX2Zyb21fZGVwYXJ0dXJlLFxuICAgICAgICAgICAgICB0cmlwX2lkOiByZXEuYm9keS50cmlwX2lkLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+XG4gICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGBzdG9wb3ZlclRyaXAgd2FzIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5YClcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHJlcy5zdGF0dXMoNDAwKS5zZW5kKGVycm9yKSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChlcnJvcikpO1xuICB9LFxuICByZWFkU3RvcG92ZXJUcmlwKHJlcSwgcmVzKSB7XG4gICAgcmV0dXJuIHN0b3BvdmVyVHJpcFxuICAgICAgLmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyBpZDogcmVxLnBhcmFtcy5pZCB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIH0pXG4gICAgICAudGhlbigoc3RvcG92ZXJUcmlwKSA9PiB7XG4gICAgICAgIGlmICghc3RvcG92ZXJUcmlwKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmV4aXN0YW50IHN0b3BvdmVyVHJpcCcsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHN0b3BvdmVyVHJpcCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9LFxuICBkZWxldGVTdG9wb3ZlclRyaXAocmVxLCByZXMpIHtcbiAgICBzZXF1ZWxpemVcbiAgICAgIC5xdWVyeShcbiAgICAgICAgXCJERUxFVEUgRlJPTSBzdG9wb3Zlcl90cmlwIFdIRVJFIGlkPSdcIiArIHJlcS5wYXJhbXMuaWQgKyBcIidcIixcbiAgICAgICAgeyB0eXBlOiBzZXF1ZWxpemUuUXVlcnlUeXBlcy5ERUxFVEUgfSxcbiAgICAgICAge31cbiAgICAgIClcbiAgICAgIC50aGVuKHJlcy5zdGF0dXMoMjAwKS5zZW5kKCdzdG9wb3ZlclRyaXAgZGVsZXRlZCBzdWNjZXNzZnVsbHknKSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHJlcy5zdGF0dXMoNDAwKS5zZW5kKGVycm9yKSk7XG4gIH0sXG59O1xuIl19