"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const price = db.Price;
module.exports = {
    //insertion of a new company
    insertPrice(req, res) {
        sequelize
            .query("INSERT INTO price (price_per_km, price_per_hour, forfait_price, vehicule_fleet_id) VALUES('" +
            req.body.price_per_km +
            "', '" +
            req.body.price_per_hour +
            "', '" +
            req.body.forfait_price +
            "', '" +
            req.body.vehicule_fleet_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('price added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updatePrice(req, res) {
        return price
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((price) => {
            if (!price) {
                return res.status(200).send({
                    message: ' inexistant price',
                });
            }
            else {
                return price
                    .update({
                    price_per_km: req.body.price_per_km,
                    price_per_hour: req.body.price_per_hour,
                    forfait_price: req.body.forfait_price,
                    vehicule_fleet_id: req.body.vehicule_fleet_id,
                })
                    .then(() => res.status(200).send(`price updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readPrice(req, res) {
        return price
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((price) => {
            if (!price) {
                return res.status(200).send({
                    message: 'inexistant price',
                });
            }
            else {
                return res.status(200).send(price);
            }
        });
    },
    // read price with pagination
    readPriceChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return price
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((price) => {
            if (!price) {
                return res.status(200).send({
                    message: 'inexistant price',
                });
            }
            else {
                return res.status(200).send(price);
            }
        });
    },
    deletePrice(req, res) {
        sequelize
            .query("DELETE FROM price WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('price deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,