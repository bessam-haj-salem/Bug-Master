//const ville1 = require('./ville.ts');
//const agence = require('./agence');
const list = require('./listControl');
const hotel1 = require('./hotel');
const image1 = require('./image');
const aeroport = require('./aeroport');
//*************************************************
// *********************api rafahia******************
const clientCompany = require('./clientCompany');
const trip = require('./trip');
const driver = require('./driver');
const passeport = require('./passeport');
const personalGroup = require('./personalGroup');
const vehiculeFleet = require('./vehiculeFleet');
const price = require('./price');
const passengerLuggage = require('./passengerLuggage');
const proformaInvoice = require('./proformaInvoice');
const inspection = require('./technicalInspection');
const insurance = require('./vehiculeInsurance');
const maintenance = require('./vehiculeMaintenance');
const tva = require('./tva');
const tripDriver = require('./tripDriver');
const tripUsualCustomer = require('./tripUsualCustomer');
const tripClientCompany = require('./tripClientCompany');
const tradeMargin = require('./tradeMargin');
const usualCustomer = require('./usualCustomer');
const usualCustomerClientCompany = require('./usualCustomerClientCompany');
const rentClientCompany = require('./rentClientCompany');
const rentUsualCustomer = require('./rentUsualCustomer');
const rentWithDriverClientCompany = require('./rentWithDriverClientCompany');
const rentWithDriverUsualCustomer = require('./rentWithDriverUsualCustomer');
const rentWithDriverClientCompanyDriver = require('./rentWithDriverClientCompanyDriver');
const rentWithDriverUsualCustomerDriver = require('./rentWithDriverUsualCustomerDriver');
const stopoverTrip = require('./stopoverTrip');
const stopoverUsualCustomer = require('./stopoverUsualCustomer');
const usualCustomerPersonalGroup = require('./usualCustomerPersonalGroup');
// *********************api rafahia******************
var nodemailer = require('nodemailer');
const poolConfig = {
    pool: true,
    host: 'smtp.gmail.com',
    port: 465,
    secure: true,
    auth: {
        user: 'reservation.tasnimevoyages@gmail.com',
        pass: 'Dotcom2016+',
    },
};
const transporter = nodemailer.createTransport({
    pool: true,
    host: 'smtp.gmail.com',
    port: 465,
    secure: true,
    auth: {
        user: 'reservation.tasnimevoyages@gmail.com',
        pass: 'Dotcom2016+',
    },
});
module.exports = Object.freeze(poolConfig);
module.exports = {
    list,
    hotel1,
    image1,
    aeroport,
    //***rafahia***** */
    clientCompany,
    trip,
    driver,
    passeport,
    personalGroup,
    vehiculeFleet,
    price,
    passengerLuggage,
    proformaInvoice,
    inspection,
    insurance,
    maintenance,
    tva,
    tripDriver,
    tripUsualCustomer,
    tripClientCompany,
    tradeMargin,
    usualCustomer,
    usualCustomerClientCompany,
    rentClientCompany,
    rentUsualCustomer,
    rentWithDriverClientCompany,
    rentWithDriverUsualCustomer,
    rentWithDriverClientCompanyDriver,
    rentWithDriverUsualCustomerDriver,
    stopoverTrip,
    stopoverUsualCustomer,
    usualCustomerPersonalGroup,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9jb250cm9sbGVycy9pbmRleC50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9jb250cm9sbGVycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1Q0FBdUM7QUFDdkMscUNBQXFDO0FBQ3JDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN0QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRWxDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN2QyxtREFBbUQ7QUFFbkQscURBQXFEO0FBQ3JELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2pELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3pDLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2pELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2pELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3ZELE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ3JELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3BELE1BQU0sU0FBUyxHQUFH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ID0gcmVxdWlyZSgnLi92aWxsZS50cycpO1xuLy9jb25zdCBhZ2VuY2UgPSByZXF1aXJlKCcuL2FnZW5jZScpO1xuY29uc3QgbGlzdCA9IHJlcXVpcmUoJy4vbGlzdENvbnRyb2wnKTtcbmNvbnN0IGhvdGVsMSA9IHJlcXVpcmUoJy4vaG90ZWwnKTtcbmNvbnN0IGltYWdlMSA9IHJlcXVpcmUoJy4vaW1hZ2UnKTtcblxuY29uc3QgYWVyb3BvcnQgPSByZXF1aXJlKCcuL2Flcm9wb3J0Jyk7XG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuLy8gKioqKioqKioqKioqKioqKioqKioqYXBpIHJhZmFoaWEqKioqKioqKioqKioqKioqKipcbmNvbnN0IGNsaWVudENvbXBhbnkgPSByZXF1aXJlKCcuL2NsaWVudENvbXBhbnknKTtcbmNvbnN0IHRyaXAgPSByZXF1aXJlKCcuL3RyaXAnKTtcbmNvbnN0IGRyaXZlciA9IHJlcXVpcmUoJy4vZHJpdmVyJyk7XG5jb25zdCBwYXNzZXBvcnQgPSByZXF1aXJlKCcuL3Bhc3NlcG9ydCcpO1xuY29uc3QgcGVyc29uYWxHcm91cCA9IHJlcXVpcmUoJy4vcGVyc29uYWxHcm91cCcpO1xuY29uc3QgdmVoaWN1bGVGbGVldCA9IHJlcXVpcmUoJy4vdmVoaWN1bGVGbGVldCcpO1xuY29uc3QgcHJpY2UgPSByZXF1aXJlKCcuL3ByaWNlJyk7XG5jb25zdCBwYXNzZW5nZXJMdWdnYWdlID0gcmVxdWlyZSgnLi9wYXNzZW5nZXJMdWdnYWdlJyk7XG5jb25zdCBwcm9mb3JtYUludm9pY2UgPSByZXF1aXJlKCcuL3Byb2Zvcm1hSW52b2ljZScpO1xuY29uc3QgaW5zcGVjdGlvbiA9IHJlcXVpcmUoJy4vdGVjaG5pY2FsSW5zcGVjdGlvbicpO1xuY29uc3QgaW5zdXJhbmNlID0gcmVxdWlyZSgnLi92ZWhpY3VsZUluc3VyYW5jZScpO1xuY29uc3QgbWFpbnRlbmFuY2UgPSByZXF1aXJlKCcuL3ZlaGljdWxlTWFpbnRlbmFuY2UnKTtcbmNvbnN0IHR2YSA9IHJlcXVpcmUoJy4vdHZhJyk7XG5jb25zdCB0cmlwRHJpdmVyID0gcmVxdWlyZSgnLi90cmlwRHJpdmVyJyk7XG5jb25zdCB0cmlwVXN1YWxDdXN0b21lciA9IHJlcXVpcmUoJy4vdHJpcFVzdWFsQ3VzdG9tZXInKTtcbmNvbnN0IHRyaXBDbGllbnRDb21wYW55ID0gcmVxdWlyZSgnLi90cmlwQ2xpZW50Q29tcGFueScpO1xuY29uc3QgdHJhZGVNYXJnaW4gPSByZXF1aXJlKCcuL3RyYWRlTWFyZ2luJyk7XG5jb25zdCB1c3VhbEN1c3RvbWVyID0gcmVxdWlyZSgnLi91c3VhbEN1c3RvbWVyJyk7XG5jb25zdCB1c3VhbEN1c3RvbWVyQ2xpZW50Q29tcGFueSA9IHJlcXVpcmUoJy4vdXN1YWxDdXN0b21lckNsaWVudENvbXBhbnknKTtcbmNvbnN0IHJlbnRDbGllbnRDb21wYW55ID0gcmVxdWlyZSgnLi9yZW50Q2xpZW50Q29tcGFueScpO1xuY29uc3QgcmVudFVzdWFsQ3VzdG9tZXIgPSByZXF1aXJlKCcuL3JlbnRVc3VhbEN1c3RvbWVyJyk7XG5jb25zdCByZW50V2l0aERyaXZlckNsaWVudENvbXBhbnkgPSByZXF1aXJlKCcuL3JlbnRXaXRoRHJpdmVyQ2xpZW50Q29tcGFueScpO1xuY29uc3QgcmVudFdpdGhEcml2ZXJVc3VhbEN1c3RvbWVyID0gcmVxdWlyZSgnLi9yZW50V2l0aERyaXZlclVzdWFsQ3VzdG9tZXInKTtcbmNvbnN0IHJlbnRXaXRoRHJpdmVyQ2xpZW50Q29tcGFueURyaXZlciA9IHJlcXVpcmUoJy4vcmVudFdpdGhEcml2ZXJDbGllbnRDb21wYW55RHJpdmVyJyk7XG5jb25zdCByZW50V2l0aERyaXZlclVzdWFsQ3VzdG9tZXJEcml2ZXIgPSByZXF1aXJlKCcuL3JlbnRXaXRoRHJpdmVyVXN1YWxDdXN0b21lckRyaXZlcicpO1xuY29uc3Qgc3RvcG92ZXJUcmlwID0gcmVxdWlyZSgnLi9zdG9wb3ZlclRyaXAnKTtcbmNvbnN0IHN0b3BvdmVyVXN1YWxDdXN0b21lciA9IHJlcXVpcmUoJy4vc3RvcG92ZXJVc3VhbEN1c3RvbWVyJyk7XG5jb25zdCB1c3VhbEN1c3RvbWVyUGVyc29uYWxHcm91cCA9IHJlcXVpcmUoJy4vdXN1YWxDdXN0b21lclBlcnNvbmFsR3JvdXAnKTtcbi8vICoqKioqKioqKioqKioqKioqKioqKmFwaSByYWZhaGlhKioqKioqKioqKioqKioqKioqXG5cbnZhciBub2RlbWFpbGVyID0gcmVxdWlyZSgnbm9kZW1haWxlcicpO1xuXG5jb25zdCBwb29sQ29uZmlnID0ge1xuICBwb29sOiB0cnVlLFxuICBob3N0OiAnc210cC5nbWFpbC5jb20nLFxuICBwb3J0OiA0NjUsXG4gIHNlY3VyZTogdHJ1ZSxcbiAgYXV0aDoge1xuICAgIHVzZXI6ICdyZXNlcnZhdGlvbi50YXNuaW1ldm95YWdlc0BnbWFpbC5jb20nLFxuICAgIHBhc3M6ICdEb3Rjb20yMDE2KycsXG4gIH0sXG59O1xuY29uc3QgdHJhbnNwb3J0ZXIgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XG4gIHBvb2w6IHRydWUsXG4gIGhvc3Q6ICdzbXRwLmdtYWlsLmNvbScsXG4gIHBvcnQ6IDQ2NSxcbiAgc2VjdXJlOiB0cnVlLFxuICBhdXRoOiB7XG4gICAgdXNlcjogJ3Jlc2VydmF0aW9uLnRhc25pbWV2b3lhZ2VzQGdtYWlsLmNvbScsXG4gICAgcGFzczogJ0RvdGNvbTIwMTYrJyxcbiAgfSxcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZnJlZXplKHBvb2xDb25maWcpO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxpc3QsXG4gIGhvdGVsMSxcbiAgaW1hZ2UxLFxuICBhZXJvcG9ydCxcbiAgLy8qKipyYWZhaGlhKioqKiogKi9cbiAgY2xpZW50Q29tcGFueSxcbiAgdHJpcCxcbiAgZHJpdmVyLFxuICBwYXNzZXBvcnQsXG4gIHBlcnNvbmFsR3JvdXAsXG4gIHZlaGljdWxlRmxlZXQsXG4gIHByaWNlLFxuICBwYXNzZW5nZXJMdWdnYWdlLFxuICBwcm9mb3JtYUludm9pY2UsXG5cbiAgaW5zcGVjdGlvbixcbiAgaW5zdXJhbmNlLFxuICBtYWludGVuYW5jZSxcbiAgdHZhLFxuICB0cmlwRHJpdmVyLFxuICB0cmlwVXN1YWxDdXN0b21lcixcbiAgdHJpcENsaWVudENvbXBhbnksXG4gIHRyYWRlTWFyZ2luLFxuXG4gIHVzdWFsQ3VzdG9tZXIsXG5cbiAgdXN1YWxDdXN0b21lckNsaWVudENvbXBhbnksXG4gIHJlbnRDbGllbnRDb21wYW55LFxuICByZW50VXN1YWxDdXN0b21lcixcbiAgcmVudFdpdGhEcml2ZXJDbGllbnRDb21wYW55LFxuICByZW50V2l0aERyaXZlclVzdWFsQ3VzdG9tZXIsXG4gIHJlbnRXaXRoRHJpdmVyQ2xpZW50Q29tcGFueURyaXZlcixcbiAgcmVudFdpdGhEcml2ZXJVc3VhbEN1c3RvbWVyRHJpdmVyLFxuICBzdG9wb3ZlclRyaXAsXG4gIHN0b3BvdmVyVXN1YWxDdXN0b21lcixcbiAgdXN1YWxDdXN0b21lclBlcnNvbmFsR3JvdXAsXG4gIC8vKioqKnJhZmFoaWEqKioqICovXG59O1xuIl19