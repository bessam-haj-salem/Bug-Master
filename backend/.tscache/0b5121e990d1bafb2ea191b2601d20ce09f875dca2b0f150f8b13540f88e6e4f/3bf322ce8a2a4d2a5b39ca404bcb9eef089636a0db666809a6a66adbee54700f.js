"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VehiculeMaintenanceFactory = void 0;
exports.VehiculeMaintenanceFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        nature_maintenance: {
            type: DataTypes.ENUM('prevention', 'correction'),
            allowNull: false,
        },
        date_maintenance: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        designation_maintenance: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        cost_maintenance: {
            type: DataTypes.DECIMAL(10, 3),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const VehiculeMaintenance = sequelize.define('vehicule_maintenance', attributes, {
        freezeTableName: true,
    });
    VehiculeMaintenance.associate = (models) => {
        VehiculeMaintenance.belongsTo(models.VehiculeFleet, {
            foreignKey: 'id',
        });
    };
    return VehiculeMaintenance;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVmVoaWN1bGVNYWludGVuYW5jZS50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVmVoaWN1bGVNYWludGVuYW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFnQmEsUUFBQSwwQkFBMEIsR0FBRyxDQUN4QyxTQUE4QixFQUM5QixTQUE4QixFQUk5QixFQUFFO0lBQ0YsTUFBTSxVQUFVLEdBQXNEO1FBQ3BFLEVBQUUsRUFBRTtZQUNGLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUMzQixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsSUFBSTtTQUNwQjtRQUNELGtCQUFrQixFQUFFO1lBQ2xCLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUM7WUFDaEQsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxnQkFBZ0IsRUFBRTtZQUNoQixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCx1QkFBdUIsRUFBRTtZQUN2QixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxnQkFBZ0IsRUFBRTtZQUNoQixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO0tBQ0YsQ0FBQztJQUVGLE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FHMUMsc0JBQXNCLEVBQUUsVUFBVSxFQUFFO1FBQ3BDLGVBQWUsRUFBRSxJQUFJO0tBQ3RCLENBQUMsQ0FBQztJQUNILG1CQUFtQixDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ3pDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFO1lBQ2xELFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLE9BQU8sbUJBQW1CLENBQUM7QUFDN0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgU2VxdWVsaXplIGZyb20gJ3NlcXVlbGl6ZSc7XG5cbmltcG9ydCB7IFNlcXVlbGl6ZUF0dHJpYnV0ZXMgfSBmcm9tICcuLi90eXBpbmdzL1NlcXVlbGl6ZUF0dHJpYnV0ZXMnO1xuZXhwb3J0IGludGVyZmFjZSB2ZWhpY3VsZU1haW50ZW5hbmNlQXR0cmlidXRlIHtcbiAgaWQ6IG51bWJlcjtcbiAgbmF0dXJlX21haW50ZW5hbmNlPzogc3RyaW5nO1xuICBkYXRlX21haW50ZW5hbmNlPzogRGF0ZTtcbiAgZGVzaWduYXRpb25fbWFpbnRlbmFuY2U/OiBzdHJpbmc7XG4gIGNvc3RfbWFpbnRlbmFuY2U/OiBudW1iZXI7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSB2ZWhpY3VsZU1haW50ZW5hbmNlSW5zdGFuY2VcbiAgZXh0ZW5kcyBTZXF1ZWxpemUuSW5zdGFuY2U8dmVoaWN1bGVNYWludGVuYW5jZUF0dHJpYnV0ZT4sXG4gICAgdmVoaWN1bGVNYWludGVuYW5jZUF0dHJpYnV0ZSB7fVxuXG5leHBvcnQgY29uc3QgVmVoaWN1bGVNYWludGVuYW5jZUZhY3RvcnkgPSAoXG4gIHNlcXVlbGl6ZTogU2VxdWVsaXplLlNlcXVlbGl6ZSxcbiAgRGF0YVR5cGVzOiBTZXF1ZWxpemUuRGF0YVR5cGVzXG4pOiBTZXF1ZWxpemUuTW9kZWw8XG4gIHZlaGljdWxlTWFpbnRlbmFuY2VJbnN0YW5jZSxcbiAgdmVoaWN1bGVNYWludGVuYW5jZUF0dHJpYnV0ZVxuPiA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZXM6IFNlcXVlbGl6ZUF0dHJpYnV0ZXM8dmVoaWN1bGVNYWludGVuYW5jZUF0dHJpYnV0ZT4gPSB7XG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSKDExKSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICBwcmltYXJ5S2V5OiB0cnVlLFxuICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICB9LFxuICAgIG5hdHVyZV9tYWludGVuYW5jZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkVOVU0oJ3ByZXZlbnRpb24nLCAnY29ycmVjdGlvbicpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGRhdGVfbWFpbnRlbmFuY2U6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGRlc2lnbmF0aW9uX21haW50ZW5hbmNlOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgY29zdF9tYWludGVuYW5jZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRFQ0lNQUwoMTAsIDMpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGNyZWF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgdXBkYXRlZEF0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBWZWhpY3VsZU1haW50ZW5hbmNlID0gc2VxdWVsaXplLmRlZmluZTxcbiAgICB2ZWhpY3VsZU1haW50ZW5hbmNlSW5zdGFuY2UsXG4gICAgdmVoaWN1bGVNYWludGVuYW5jZUF0dHJpYnV0ZVxuICA+KCd2ZWhpY3VsZV9tYWludGVuYW5jZScsIGF0dHJpYnV0ZXMsIHtcbiAgICBmcmVlemVUYWJsZU5hbWU6IHRydWUsXG4gIH0pO1xuICBWZWhpY3VsZU1haW50ZW5hbmNlLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBWZWhpY3VsZU1haW50ZW5hbmNlLmJlbG9uZ3NUbyhtb2RlbHMuVmVoaWN1bGVGbGVldCwge1xuICAgICAgZm9yZWlnbktleTogJ2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIFZlaGljdWxlTWFpbnRlbmFuY2U7XG59O1xuIl19