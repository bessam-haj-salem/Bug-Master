"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const stopoverUsualCustomer = db.StopoverUsualCustomer;
module.exports = {
    insertStopoverUsualCustomer(req, res) {
        sequelize
            .query("INSERT INTO stopover_usual_customer (adress, zone, time_and_date, city, country,km_from_departure,duration_hour_from_departure, usual_customer_id ) VALUES('" +
            req.body.adress +
            "', '" +
            req.body.zone +
            "','" +
            req.body.time_and_date +
            "', '" +
            req.body.city +
            "', '" +
            req.body.country +
            "', '" +
            req.body.km_from_departure +
            "', '" +
            req.body.duration_hour_from_departure +
            "','" +
            req.body.usual_customer_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('stopoverUsualCustomer added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateStopoverUsualCustomer(req, res) {
        return stopoverUsualCustomer
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((stopoverUsualCustomer) => {
            if (!stopoverUsualCustomer) {
                return res.status(200).send({
                    message: ' inexistant stopover UsualCustomer',
                });
            }
            else {
                return stopoverUsualCustomer
                    .update({
                    adress: req.body.adress,
                    zone: req.body.zone,
                    time_and_date: req.body.time_and_date,
                    country: req.body.country,
                    km_from_departure: req.body.km_from_departure,
                    duration_hour_from_departure: req.body.duration_hour_from_departure,
                    usual_customer_id: req.body.usual_customer_id,
                })
                    .then(() => res
                    .status(200)
                    .send(`stopoverUsualCustomer was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readStopoverUsualCustomer(req, res) {
        return stopoverUsualCustomer
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((stopoverUsualCustomer) => {
            if (!stopoverUsualCustomer) {
                return res.status(200).send({
                    message: 'inexistant stopoverUsualCustomer',
                });
            }
            else {
                return res.status(200).send(stopoverUsualCustomer);
            }
        });
    },
    // read stopoverUsualCustomer with pagination
    readStopoverUsualCustomerChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return stopoverUsualCustomer
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((stopoverUsualCustomer) => {
            if (!stopoverUsualCustomer) {
                return res.status(200).send({
                    message: 'inexistant stopoverUsualCustomer',
                });
            }
            else {
                return res.status(200).send(stopoverUsualCustomer);
            }
        });
    },
    deleteStopoverUsualCustomer(req, res) {
        sequelize
            .query("DELETE FROM stopover_usual_customer WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('stopoverUsualCustomer deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,