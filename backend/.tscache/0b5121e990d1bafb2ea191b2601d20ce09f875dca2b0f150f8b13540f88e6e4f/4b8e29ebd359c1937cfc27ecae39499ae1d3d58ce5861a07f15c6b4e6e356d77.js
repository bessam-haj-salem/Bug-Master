"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsualCustomerFactory = void 0;
exports.UsualCustomerFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        first_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        last_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        personal_ident: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        age: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
        },
        special_condition: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const UsualCustomer = sequelize.define('usual_customer', attributes, {
        freezeTableName: true,
    });
    // usualCustomer.associate = (models) => {
    //   usualCustomer.belongsTo(models.Trip, {
    //     //OK
    //     foreignKey: 'id',
    //   });
    // };
    UsualCustomer.associate = (models) => {
        UsualCustomer.belongsTo(models.PersonalGroup, {
            //OK
            foreignKey: 'id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.belongsTo(models.ClientCompany, {
            //OK
            foreignKey: 'id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.PassengerLuggage, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.Passeport, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.Stopover, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.TripPassenger, {
            foreignKey: 'usual_customer_id',
        });
    };
    return UsualCustomer;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVXN1YWxDdXN0b21lci50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVXN1YWxDdXN0b21lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUE2QmEsUUFBQSxvQkFBb0IsR0FBRyxDQUNsQyxTQUE4QixFQUM5QixTQUE4QixFQUNrQyxFQUFFO0lBQ2xFLE1BQU0sVUFBVSxHQUFnRDtRQUM5RCxFQUFFLEVBQUU7WUFDRixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7WUFDaEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsYUFBYSxFQUFFLElBQUk7U0FDcEI7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxpQkFBaUIsRUFBRTtZQUNqQixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7S0FDRixDQUFDO0lBRUYsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FHcEMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFO1FBQzlCLGVBQWUsRUFBRSxJQUFJO0tBQ3RCLENBQUMsQ0FBQztJQUNILDBDQUEwQztJQUMxQywyQ0FBMkM7SUFDM0MsV0FBVztJQUNYLHdCQUF3QjtJQUN4QixRQUFRO0lBQ1IsS0FBSztJQUNMLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDNUMsSUFBSTtZQUNKLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDNUMsSUFBSTtZQUNKLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtZQUM3QyxVQUFVLEVBQUUsbUJBQW1CO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDdEMsVUFBVSxFQUFFLG1CQUFtQjtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFDRixhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbkMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsYUFBYSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ25DLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtZQUMxQyxVQUFVLEVBQUUsbUJBQW1CO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLE9BQU8sYUFBYSxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFNlcXVlbGl6ZSBmcm9tICdzZXF1ZWxpemUnO1xuXG5pbXBvcnQgeyBTZXF1ZWxpemVBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vdHlwaW5ncy9TZXF1ZWxpemVBdHRyaWJ1dGVzJztcbi8vdGFibGUgaG90ZWxcblxuaW1wb3J0IHsgY2xpZW50Q29tcGFueUF0dHJpYnV0ZSwgY2xpZW50Q29tcGFueUluc3RhbmNlIH0gZnJvbSAnLi9DbGllbnRDb21wYW55JztcbmltcG9ydCB7IHBlcnNvbmFsR3JvdXBBdHRyaWJ1dGUsIHBlcnNvbmFsR3JvdXBJbnN0YW5jZSB9IGZyb20gJy4vUGVyc29uYWxHcm91cCc7XG5pbXBvcnQgeyBwYXNzZXBvcnRBdHRyaWJ1dGUsIHBhc3NlcG9ydEluc3RhbmNlIH0gZnJvbSAnLi9QYXNzZXBvcnQnO1xuaW1wb3J0IHtcbiAgcGFzc2VuZ2VyTHVnZ2FnZUF0dHJpYnV0ZSxcbiAgcGFzc2VuZ2VyTHVnZ2FnZUluc3RhbmNlLFxufSBmcm9tICcuL1Bhc3Nlbmdlckx1Z2dhZ2UnO1xuaW1wb3J0IHsgc3RvcG92ZXJBdHRyaWJ1dGUsIHN0b3BvdmVySW5zdGFuY2UgfSBmcm9tICcuL1N0b3BvdmVyJztcbmltcG9ydCB7IHRyaXBQYXNzZW5nZXJBdHRyaWJ1dGUsIHRyaXBQYXNzZW5nZXJJbnN0YW5jZSB9IGZyb20gJy4vVHJpcFBhc3Nlbmdlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgdXN1YWxDdXN0b21lckF0dHJpYnV0ZSB7XG4gIGlkOiBudW1iZXI7XG4gIGZpcnN0X25hbWU/OiBzdHJpbmc7XG4gIGxhc3RfbmFtZT86IHN0cmluZztcbiAgcGVyc29uYWxfaWRlbnQ/OiBzdHJpbmc7XG4gIGFnZT86IG51bWJlcjtcbiAgc3BlY2lhbF9jb25kaXRpb24/OiBzdHJpbmc7XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSB1c3VhbEN1c3RvbWVySW5zdGFuY2VcbiAgZXh0ZW5kcyBTZXF1ZWxpemUuSW5zdGFuY2U8dXN1YWxDdXN0b21lckF0dHJpYnV0ZT4sXG4gICAgdXN1YWxDdXN0b21lckF0dHJpYnV0ZSB7fVxuXG5leHBvcnQgY29uc3QgVXN1YWxDdXN0b21lckZhY3RvcnkgPSAoXG4gIHNlcXVlbGl6ZTogU2VxdWVsaXplLlNlcXVlbGl6ZSxcbiAgRGF0YVR5cGVzOiBTZXF1ZWxpemUuRGF0YVR5cGVzXG4pOiBTZXF1ZWxpemUuTW9kZWw8dXN1YWxDdXN0b21lckluc3RhbmNlLCB1c3VhbEN1c3RvbWVyQXR0cmlidXRlPiA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZXM6IFNlcXVlbGl6ZUF0dHJpYnV0ZXM8dXN1YWxDdXN0b21lckF0dHJpYnV0ZT4gPSB7XG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSKDExKSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgICBwcmltYXJ5S2V5OiB0cnVlLFxuICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICB9LFxuICAgIGZpcnN0X25hbWU6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBsYXN0X25hbWU6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBwZXJzb25hbF9pZGVudDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGFnZToge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLklOVEVHRVIoMTEpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHNwZWNpYWxfY29uZGl0aW9uOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgY3JlYXRlZEF0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICB1cGRhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IFVzdWFsQ3VzdG9tZXIgPSBzZXF1ZWxpemUuZGVmaW5lPFxuICAgIHVzdWFsQ3VzdG9tZXJJbnN0YW5jZSxcbiAgICB1c3VhbEN1c3RvbWVyQXR0cmlidXRlXG4gID4oJ3VzdWFsX2N1c3RvbWVyJywgYXR0cmlidXRlcywge1xuICAgIGZyZWV6ZVRhYmxlTmFtZTogdHJ1ZSxcbiAgfSk7XG4gIC8vIHVzdWFsQ3VzdG9tZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAvLyAgIHVzdWFsQ3VzdG9tZXIuYmVsb25nc1RvKG1vZGVscy5UcmlwLCB7XG4gIC8vICAgICAvL09LXG4gIC8vICAgICBmb3JlaWduS2V5OiAnaWQnLFxuICAvLyAgIH0pO1xuICAvLyB9O1xuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmJlbG9uZ3NUbyhtb2RlbHMuUGVyc29uYWxHcm91cCwge1xuICAgICAgLy9PS1xuICAgICAgZm9yZWlnbktleTogJ2lkJyxcbiAgICB9KTtcbiAgfTtcblxuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmJlbG9uZ3NUbyhtb2RlbHMuQ2xpZW50Q29tcGFueSwge1xuICAgICAgLy9PS1xuICAgICAgZm9yZWlnbktleTogJ2lkJyxcbiAgICB9KTtcbiAgfTtcblxuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmhhc01hbnkobW9kZWxzLlBhc3Nlbmdlckx1Z2dhZ2UsIHtcbiAgICAgIGZvcmVpZ25LZXk6ICd1c3VhbF9jdXN0b21lcl9pZCcsXG4gICAgfSk7XG4gIH07XG4gIFVzdWFsQ3VzdG9tZXIuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFVzdWFsQ3VzdG9tZXIuaGFzTWFueShtb2RlbHMuUGFzc2Vwb3J0LCB7XG4gICAgICBmb3JlaWduS2V5OiAndXN1YWxfY3VzdG9tZXJfaWQnLFxuICAgIH0pO1xuICB9O1xuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmhhc01hbnkobW9kZWxzLlN0b3BvdmVyLCB7XG4gICAgICBmb3JlaWduS2V5OiAndXN1YWxfY3VzdG9tZXJfaWQnLFxuICAgIH0pO1xuICB9O1xuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmhhc01hbnkobW9kZWxzLlRyaXBQYXNzZW5nZXIsIHtcbiAgICAgIGZvcmVpZ25LZXk6ICd1c3VhbF9jdXN0b21lcl9pZCcsXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBVc3VhbEN1c3RvbWVyO1xufTtcbiJdfQ==