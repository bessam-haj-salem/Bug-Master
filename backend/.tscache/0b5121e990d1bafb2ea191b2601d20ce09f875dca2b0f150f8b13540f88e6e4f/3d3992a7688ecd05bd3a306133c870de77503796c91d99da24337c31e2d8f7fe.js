"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
// const sequelize = new Sequelize('bessamDB', 'phpmyadmin', 'tgbyhnuj', {
//   host: 'localhost',
//   dialect: 'mysql',
//   port: 3306,
//   pool: {
//     max: 5,
//     min: 0,
//     idle: 20000,
//     acquire: 20000,
//   },
// });
const hotel = db.Hotel;
module.exports = {
    getHotel(req, res) {
        sequelize
            .query('SELECT * FROM  Hotel', 
        // Test table
        { type: sequelize.QueryTypes.SELECT }, {})
            .then((te) => res.status(200).send(te[0]))
            .catch((error) => res.status(400).send(error));
    },
    getHotel1(req, res) {
        return hotel
            .findAll({
            // where: { id: req.params.id },
            attributes: {},
        })
            .then((hotel) => {
            if (!hotel) {
                return res.status(200).send({
                    message: 'hotel pas trouvée',
                });
            }
            else {
                return res.status(200).send(hotel[0]);
            }
        });
    },
    getOneHotel(req, res) {
        return hotel
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((hotel) => {
            if (!hotel) {
                return res.status(200).send({
                    message: 'hotel pas trouvé',
                });
            }
            else {
                return res.status(200).send(hotel);
            }
        });
    },
    updateOneHotel(req, res) {
        return hotel
            .findOne({
            where: { nom: req.params.id },
            attributes: {},
        })
            .then((hotel) => {
            if (!hotel) {
                return res.status(200).send({
                    message: 'hotel pas trouvé',
                });
            }
            else {
                return hotel
                    .update({
                    nom: req.body.nom,
                })
                    .then(() => res
                    .status(200)
                    .send(`l'hôtel ${req.params.id} a été mise à jour avec succès`)) // Send back the updated todo.
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9jb250cm9sbGVycy9ob3RlbC50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9jb250cm9sbGVycy9ob3RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ2xFLDRDQUE0QztBQUU1QyxNQUFNLEVBQUUsR0FBRyx3QkFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXpDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUM7QUFFL0IsMEVBQTBFO0FBQzFFLHVCQUF1QjtBQUN2QixzQkFBc0I7QUFDdEIsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixjQUFjO0FBQ2QsY0FBYztBQUNkLG1CQUFtQjtBQUNuQixzQkFBc0I7QUFDdEIsT0FBTztBQUNQLE1BQU07QUFFTixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0FBRXZCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFDZixRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDZixTQUFTO2FBQ04sS0FBSyxDQUNKLHNCQUFzQjtRQUN0QixhQUFhO1FBQ2IsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFDckMsRUFBRSxDQUNIO2FBQ0EsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUV6QyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUNELFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRztRQUNoQixPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUM7WUFDUCxnQ0FBZ0M7WUFDaEMsVUFBVSxFQUFFLEVBQUU7U0FDZixDQUFDO2FBQ0QsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDZCxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNWLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQzFCLE9BQU8sRUFBRSxtQkFBbUI7aUJBQzdCLENBQUMsQ0FBQzthQUNKO2lCQUFNO2dCQUNMLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdkM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDRCxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDbEIsT0FBTyxLQUFLO2FBQ1QsT0FBTyxDQUFDO1lBQ1AsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQzVCLFVBQVUsRUFBRSxFQUFFO1NBQ2YsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDVixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUMxQixPQUFPLEVBQUUsa0JBQWtCO2lCQUM1QixDQUFDLENBQUM7YUFDSjtpQkFBTTtnQkFDTCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ3JCLE9BQU8sS0FBSzthQUNULE9BQU8sQ0FBQztZQUNQLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUM3QixVQUFVLEVBQUUsRUFBRTtTQUNmLENBQUM7YUFDRCxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1YsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDMUIsT0FBTyxFQUFFLGtCQUFrQjtpQkFDNUIsQ0FBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsT0FBTyxLQUFLO3FCQUNULE1BQU0sQ0FBQztvQkFDTixHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHO2lCQUNsQixDQUFDO3FCQUNELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FDVCxHQUFHO3FCQUNBLE1BQU0sQ0FBQyxHQUFHLENBQUM7cUJBQ1gsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLGdDQUFnQyxDQUFDLENBQ2xFLENBQUMsOEJBQThCO3FCQUMvQixLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDbEQ7UUFDSCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXF1ZWxpemUsIFF1ZXJ5VHlwZXMgfSBmcm9tICdzZXF1ZWxpemUnO1xuY29uc3Qgc2VxdWVsaXplQ29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnL3NlcXVlbGl6ZUNvbmZpZy5qc29uJyk7XG5pbXBvcnQgeyBjcmVhdGVNb2RlbHMgfSBmcm9tICcuLi9tb2RlbHMtdHMnO1xuaW1wb3J0IHsgSG90ZWxGYWN0b3J5IH0gZnJvbSAnLi4vbW9kZWxzLXRzL0hvdGVsJztcbmNvbnN0IGRiID0gY3JlYXRlTW9kZWxzKHNlcXVlbGl6ZUNvbmZpZyk7XG5cbmNvbnN0IHNlcXVlbGl6ZSA9IGRiLnNlcXVlbGl6ZTtcblxuLy8gY29uc3Qgc2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZSgnYmVzc2FtREInLCAncGhwbXlhZG1pbicsICd0Z2J5aG51aicsIHtcbi8vICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4vLyAgIGRpYWxlY3Q6ICdteXNxbCcsXG4vLyAgIHBvcnQ6IDMzMDYsXG4vLyAgIHBvb2w6IHtcbi8vICAgICBtYXg6IDUsXG4vLyAgICAgbWluOiAwLFxuLy8gICAgIGlkbGU6IDIwMDAwLFxuLy8gICAgIGFjcXVpcmU6IDIwMDAwLFxuLy8gICB9LFxuLy8gfSk7XG5cbmNvbnN0IGhvdGVsID0gZGIuSG90ZWw7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIb3RlbChyZXEsIHJlcykge1xuICAgIHNlcXVlbGl6ZVxuICAgICAgLnF1ZXJ5KFxuICAgICAgICAnU0VMRUNUICogRlJPTSAgSG90ZWwnLFxuICAgICAgICAvLyBUZXN0IHRhYmxlXG4gICAgICAgIHsgdHlwZTogc2VxdWVsaXplLlF1ZXJ5VHlwZXMuU0VMRUNUIH0sXG4gICAgICAgIHt9XG4gICAgICApXG4gICAgICAudGhlbigodGUpID0+IHJlcy5zdGF0dXMoMjAwKS5zZW5kKHRlWzBdKSlcblxuICAgICAgLmNhdGNoKChlcnJvcikgPT4gcmVzLnN0YXR1cyg0MDApLnNlbmQoZXJyb3IpKTtcbiAgfSxcbiAgZ2V0SG90ZWwxKHJlcSwgcmVzKSB7XG4gICAgcmV0dXJuIGhvdGVsXG4gICAgICAuZmluZEFsbCh7XG4gICAgICAgIC8vIHdoZXJlOiB7IGlkOiByZXEucGFyYW1zLmlkIH0sXG4gICAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgfSlcbiAgICAgIC50aGVuKChob3RlbCkgPT4ge1xuICAgICAgICBpZiAoIWhvdGVsKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdob3RlbCBwYXMgdHJvdXbDqWUnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZChob3RlbFswXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9LFxuICBnZXRPbmVIb3RlbChyZXEsIHJlcykge1xuICAgIHJldHVybiBob3RlbFxuICAgICAgLmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyBpZDogcmVxLnBhcmFtcy5pZCB9LFxuICAgICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIH0pXG4gICAgICAudGhlbigoaG90ZWwpID0+IHtcbiAgICAgICAgaWYgKCFob3RlbCkge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZCh7XG4gICAgICAgICAgICBtZXNzYWdlOiAnaG90ZWwgcGFzIHRyb3V2w6knLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuc2VuZChob3RlbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9LFxuICB1cGRhdGVPbmVIb3RlbChyZXEsIHJlcykge1xuICAgIHJldHVybiBob3RlbFxuICAgICAgLmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyBub206IHJlcS5wYXJhbXMuaWQgfSxcbiAgICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICB9KVxuICAgICAgLnRoZW4oKGhvdGVsKSA9PiB7XG4gICAgICAgIGlmICghaG90ZWwpIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLnNlbmQoe1xuICAgICAgICAgICAgbWVzc2FnZTogJ2hvdGVsIHBhcyB0cm91dsOpJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaG90ZWxcbiAgICAgICAgICAgIC51cGRhdGUoe1xuICAgICAgICAgICAgICBub206IHJlcS5ib2R5Lm5vbSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoKSA9PlxuICAgICAgICAgICAgICByZXNcbiAgICAgICAgICAgICAgICAuc3RhdHVzKDIwMClcbiAgICAgICAgICAgICAgICAuc2VuZChgbCdow7R0ZWwgJHtyZXEucGFyYW1zLmlkfSBhIMOpdMOpIG1pc2Ugw6Agam91ciBhdmVjIHN1Y2PDqHNgKVxuICAgICAgICAgICAgKSAvLyBTZW5kIGJhY2sgdGhlIHVwZGF0ZWQgdG9kby5cbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHJlcy5zdGF0dXMoNDAwKS5zZW5kKGVycm9yKSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiByZXMuc3RhdHVzKDQwMCkuc2VuZChlcnJvcikpO1xuICB9LFxufTtcbiJdfQ==