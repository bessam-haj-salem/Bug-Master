"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TripFactory = void 0;
exports.TripFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        ref_trip: {
            type: DataTypes.STRING(255),
            allowNull: false,
            defaultValue: '',
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const Trip = sequelize.define('trip', attributes, {
        freezeTableName: true,
    });
    Trip.associate = (models) => {
        Trip.hasMany(models.TripDriver, {
            foreignKey: 'trip_id',
        });
    };
    Trip.associate = (models) => {
        Trip.hasMany(models.TripUsualCustomer, {
            foreignKey: 'trip_id',
        });
    };
    Trip.associate = (models) => {
        Trip.hasMany(models.TripClientCompany, {
            foreignKey: 'trip_id',
        });
    };
    return Trip;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVHJpcC50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVHJpcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUF3QmEsUUFBQSxXQUFXLEdBQUcsQ0FDekIsU0FBOEIsRUFDOUIsU0FBOEIsRUFDZ0IsRUFBRTtJQUNoRCxNQUFNLFVBQVUsR0FBdUM7UUFDckQsRUFBRSxFQUFFO1lBQ0YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLGFBQWEsRUFBRSxJQUFJO1NBQ3BCO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFlBQVksRUFBRSxFQUFFO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2pCO0tBQ0YsQ0FBQztJQUVGLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQzNCLE1BQU0sRUFDTixVQUFVLEVBQ1Y7UUFDRSxlQUFlLEVBQUUsSUFBSTtLQUN0QixDQUNGLENBQUM7SUFFRixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQzlCLFVBQVUsRUFBRSxTQUFTO1NBQ3RCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtZQUNyQyxVQUFVLEVBQUUsU0FBUztTQUN0QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUU7WUFDckMsVUFBVSxFQUFFLFNBQVM7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTZXF1ZWxpemUgZnJvbSAnc2VxdWVsaXplJztcblxuaW1wb3J0IHsgU2VxdWVsaXplQXR0cmlidXRlcyB9IGZyb20gJy4uL3R5cGluZ3MvU2VxdWVsaXplQXR0cmlidXRlcyc7XG4vL3RhYmxlIGhvdGVsXG5pbXBvcnQgeyB0cmlwRHJpdmVyQXR0cmlidXRlLCB0cmlwRHJpdmVySW5zdGFuY2UgfSBmcm9tICcuL1RyaXBEcml2ZXInO1xuaW1wb3J0IHtcbiAgdHJpcFVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGUsXG4gIHRyaXBVc3VhbEN1c3RvbWVySW5zdGFuY2UsXG59IGZyb20gJy4vVHJpcFVzdWFsQ3VzdG9tZXInO1xuaW1wb3J0IHtcbiAgdHJpcENsaWVudENvbXBhbnlBdHRyaWJ1dGUsXG4gIHRyaXBDbGllbnRDb21wYW55SW5zdGFuY2UsXG59IGZyb20gJy4vVHJpcENsaWVudENvbXBhbnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIHRyaXBBdHRyaWJ1dGUge1xuICBpZDogbnVtYmVyO1xuICByZWZfdHJpcDogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIHVwZGF0ZWRBdDogRGF0ZTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgdHJpcEluc3RhbmNlXG4gIGV4dGVuZHMgU2VxdWVsaXplLkluc3RhbmNlPHRyaXBBdHRyaWJ1dGU+LFxuICAgIHRyaXBBdHRyaWJ1dGUge31cblxuZXhwb3J0IGNvbnN0IFRyaXBGYWN0b3J5ID0gKFxuICBzZXF1ZWxpemU6IFNlcXVlbGl6ZS5TZXF1ZWxpemUsXG4gIERhdGFUeXBlczogU2VxdWVsaXplLkRhdGFUeXBlc1xuKTogU2VxdWVsaXplLk1vZGVsPHRyaXBJbnN0YW5jZSwgdHJpcEF0dHJpYnV0ZT4gPT4ge1xuICBjb25zdCBhdHRyaWJ1dGVzOiBTZXF1ZWxpemVBdHRyaWJ1dGVzPHRyaXBBdHRyaWJ1dGU+ID0ge1xuICAgIGlkOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUigxMSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgIGF1dG9JbmNyZW1lbnQ6IHRydWUsXG4gICAgfSxcbiAgICByZWZfdHJpcDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogJycsXG4gICAgfSxcbiAgICBjcmVhdGVkQXQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIHVwZGF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgVHJpcCA9IHNlcXVlbGl6ZS5kZWZpbmU8dHJpcEluc3RhbmNlLCB0cmlwQXR0cmlidXRlPihcbiAgICAndHJpcCcsXG4gICAgYXR0cmlidXRlcyxcbiAgICB7XG4gICAgICBmcmVlemVUYWJsZU5hbWU6IHRydWUsXG4gICAgfVxuICApO1xuXG4gIFRyaXAuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFRyaXAuaGFzTWFueShtb2RlbHMuVHJpcERyaXZlciwge1xuICAgICAgZm9yZWlnbktleTogJ3RyaXBfaWQnLFxuICAgIH0pO1xuICB9O1xuICBUcmlwLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBUcmlwLmhhc01hbnkobW9kZWxzLlRyaXBVc3VhbEN1c3RvbWVyLCB7XG4gICAgICBmb3JlaWduS2V5OiAndHJpcF9pZCcsXG4gICAgfSk7XG4gIH07XG4gIFRyaXAuYXNzb2NpYXRlID0gKG1vZGVscykgPT4ge1xuICAgIFRyaXAuaGFzTWFueShtb2RlbHMuVHJpcENsaWVudENvbXBhbnksIHtcbiAgICAgIGZvcmVpZ25LZXk6ICd0cmlwX2lkJyxcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVHJpcDtcbn07XG4iXX0=