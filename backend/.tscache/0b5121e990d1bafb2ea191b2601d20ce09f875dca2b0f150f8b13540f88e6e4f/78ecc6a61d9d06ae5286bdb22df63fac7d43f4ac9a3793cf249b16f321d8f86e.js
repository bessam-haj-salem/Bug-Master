"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const stopover = db.Stopover;
module.exports = {
    insertStopover(req, res) {
        sequelize
            .query("INSERT INTO stopover (adress, zone, time_and_date, city, country,km_from_departure,duration_hour_from_departure,passenger_id,   trip_id ) VALUES('" +
            req.body.adress +
            "', '" +
            req.body.zone +
            "','" +
            req.body.time_and_date +
            "', '" +
            req.body.city +
            "', '" +
            req.body.country +
            "', '" +
            req.body.km_from_departure +
            "', '" +
            req.body.duration_hour_from_departure +
            "','" +
            req.body.passenger_id +
            "', '" +
            req.body.trip_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('stopover added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateStopover(req, res) {
        return stopover
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((stopover) => {
            if (!stopover) {
                return res.status(200).send({
                    message: ' inexistant stopover',
                });
            }
            else {
                return stopover
                    .update({
                    adress: req.body.adress,
                    zone: req.body.zone,
                    time_and_date: req.body.time_and_date,
                    country: req.body.country,
                    km_from_departure: req.body.km_from_departure,
                    duration_hour_from_departure: req.body.duration_hour_from_departure,
                    passenger_id: req.body.passenger_id,
                    trip_id: req.body.trip_id,
                })
                    .then(() => res.status(200).send(`stopover was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readStopover(req, res) {
        return stopover
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((stopover) => {
            if (!stopover) {
                return res.status(200).send({
                    message: 'inexistant stopover',
                });
            }
            else {
                return res.status(200).send(stopover);
            }
        });
    },
    deleteStopover(req, res) {
        sequelize
            .query("DELETE FROM stopover WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('stopover deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,