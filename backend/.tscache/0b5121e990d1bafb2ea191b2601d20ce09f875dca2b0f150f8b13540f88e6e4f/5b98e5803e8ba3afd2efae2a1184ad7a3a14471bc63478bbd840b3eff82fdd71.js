"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsualCustomerFactory = void 0;
exports.UsualCustomerFactory = (sequelize, DataTypes) => {
    const attributes = {
        id: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
            primaryKey: true,
            autoIncrement: true,
        },
        first_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        last_name: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        personal_ident: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        age: {
            type: DataTypes.INTEGER(11),
            allowNull: false,
        },
        special_condition: {
            type: DataTypes.STRING(255),
            allowNull: false,
        },
        createdAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
        updatedAt: {
            type: DataTypes.DATE,
            allowNull: false,
        },
    };
    const UsualCustomer = sequelize.define('usual_customer', attributes, {
        freezeTableName: true,
    });
    // usualCustomer.associate = (models) => {
    //   usualCustomer.belongsTo(models.Trip, {
    //     //OK
    //     foreignKey: 'id',
    //   });
    // };
    UsualCustomer.associate = (models) => {
        UsualCustomer.belongsTo(models.PersonalGroup, {
            //OK
            foreignKey: 'id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.belongsTo(models.ClientCompany, {
            //OK
            foreignKey: 'id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.PassengerLuggage, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.Passeport, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.Stopover, {
            foreignKey: 'usual_customer_id',
        });
    };
    UsualCustomer.associate = (models) => {
        UsualCustomer.hasMany(models.TripUsualCustomer, {
            foreignKey: 'usual_customer_id',
        });
    };
    return UsualCustomer;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVXN1YWxDdXN0b21lci50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvaHRtbC9hcGlfdHJhbnNmZXJzL3NlcnZlci9tb2RlbHMtdHMvVXN1YWxDdXN0b21lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFnQ2EsUUFBQSxvQkFBb0IsR0FBRyxDQUNsQyxTQUE4QixFQUM5QixTQUE4QixFQUNrQyxFQUFFO0lBQ2xFLE1BQU0sVUFBVSxHQUFnRDtRQUM5RCxFQUFFLEVBQUU7WUFDRixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7WUFDaEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsYUFBYSxFQUFFLElBQUk7U0FDcEI7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxpQkFBaUIsRUFBRTtZQUNqQixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDM0IsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7WUFDcEIsU0FBUyxFQUFFLEtBQUs7U0FDakI7S0FDRixDQUFDO0lBRUYsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FHcEMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFO1FBQzlCLGVBQWUsRUFBRSxJQUFJO0tBQ3RCLENBQUMsQ0FBQztJQUNILDBDQUEwQztJQUMxQywyQ0FBMkM7SUFDM0MsV0FBVztJQUNYLHdCQUF3QjtJQUN4QixRQUFRO0lBQ1IsS0FBSztJQUNMLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDNUMsSUFBSTtZQUNKLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7WUFDNUMsSUFBSTtZQUNKLFVBQVUsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtZQUM3QyxVQUFVLEVBQUUsbUJBQW1CO1NBQ2hDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDdEMsVUFBVSxFQUFFLG1CQUFtQjtTQUNoQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFDRixhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbkMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsYUFBYSxDQUFDLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ25DLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFO1lBQzlDLFVBQVUsRUFBRSxtQkFBbUI7U0FDaEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgU2VxdWVsaXplIGZyb20gJ3NlcXVlbGl6ZSc7XG5cbmltcG9ydCB7IFNlcXVlbGl6ZUF0dHJpYnV0ZXMgfSBmcm9tICcuLi90eXBpbmdzL1NlcXVlbGl6ZUF0dHJpYnV0ZXMnO1xuLy90YWJsZSBob3RlbFxuXG5pbXBvcnQgeyBjbGllbnRDb21wYW55QXR0cmlidXRlLCBjbGllbnRDb21wYW55SW5zdGFuY2UgfSBmcm9tICcuL0NsaWVudENvbXBhbnknO1xuaW1wb3J0IHsgcGVyc29uYWxHcm91cEF0dHJpYnV0ZSwgcGVyc29uYWxHcm91cEluc3RhbmNlIH0gZnJvbSAnLi9QZXJzb25hbEdyb3VwJztcbmltcG9ydCB7IHBhc3NlcG9ydEF0dHJpYnV0ZSwgcGFzc2Vwb3J0SW5zdGFuY2UgfSBmcm9tICcuL1Bhc3NlcG9ydCc7XG5pbXBvcnQge1xuICBwYXNzZW5nZXJMdWdnYWdlQXR0cmlidXRlLFxuICBwYXNzZW5nZXJMdWdnYWdlSW5zdGFuY2UsXG59IGZyb20gJy4vUGFzc2VuZ2VyTHVnZ2FnZSc7XG5pbXBvcnQgeyBzdG9wb3ZlckF0dHJpYnV0ZSwgc3RvcG92ZXJJbnN0YW5jZSB9IGZyb20gJy4vU3RvcG92ZXInO1xuaW1wb3J0IHtcbiAgdHJpcFVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGUsXG4gIHRyaXBVc3VhbEN1c3RvbWVySW5zdGFuY2UsXG59IGZyb20gJy4vVHJpcFVzdWFsQ3VzdG9tZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIHVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGUge1xuICBpZDogbnVtYmVyO1xuICBmaXJzdF9uYW1lPzogc3RyaW5nO1xuICBsYXN0X25hbWU/OiBzdHJpbmc7XG4gIHBlcnNvbmFsX2lkZW50Pzogc3RyaW5nO1xuICBhZ2U/OiBudW1iZXI7XG4gIHNwZWNpYWxfY29uZGl0aW9uPzogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIHVwZGF0ZWRBdDogRGF0ZTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgdXN1YWxDdXN0b21lckluc3RhbmNlXG4gIGV4dGVuZHMgU2VxdWVsaXplLkluc3RhbmNlPHVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGU+LFxuICAgIHVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGUge31cblxuZXhwb3J0IGNvbnN0IFVzdWFsQ3VzdG9tZXJGYWN0b3J5ID0gKFxuICBzZXF1ZWxpemU6IFNlcXVlbGl6ZS5TZXF1ZWxpemUsXG4gIERhdGFUeXBlczogU2VxdWVsaXplLkRhdGFUeXBlc1xuKTogU2VxdWVsaXplLk1vZGVsPHVzdWFsQ3VzdG9tZXJJbnN0YW5jZSwgdXN1YWxDdXN0b21lckF0dHJpYnV0ZT4gPT4ge1xuICBjb25zdCBhdHRyaWJ1dGVzOiBTZXF1ZWxpemVBdHRyaWJ1dGVzPHVzdWFsQ3VzdG9tZXJBdHRyaWJ1dGU+ID0ge1xuICAgIGlkOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuSU5URUdFUigxMSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgICAgcHJpbWFyeUtleTogdHJ1ZSxcbiAgICAgIGF1dG9JbmNyZW1lbnQ6IHRydWUsXG4gICAgfSxcbiAgICBmaXJzdF9uYW1lOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgbGFzdF9uYW1lOiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuU1RSSU5HKDI1NSksXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgcGVyc29uYWxfaWRlbnQ6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5TVFJJTkcoMjU1KSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBhZ2U6IHtcbiAgICAgIHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSKDExKSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgICBzcGVjaWFsX2NvbmRpdGlvbjoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLlNUUklORygyNTUpLFxuICAgICAgYWxsb3dOdWxsOiBmYWxzZSxcbiAgICB9LFxuICAgIGNyZWF0ZWRBdDoge1xuICAgICAgdHlwZTogRGF0YVR5cGVzLkRBVEUsXG4gICAgICBhbGxvd051bGw6IGZhbHNlLFxuICAgIH0sXG4gICAgdXBkYXRlZEF0OiB7XG4gICAgICB0eXBlOiBEYXRhVHlwZXMuREFURSxcbiAgICAgIGFsbG93TnVsbDogZmFsc2UsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBVc3VhbEN1c3RvbWVyID0gc2VxdWVsaXplLmRlZmluZTxcbiAgICB1c3VhbEN1c3RvbWVySW5zdGFuY2UsXG4gICAgdXN1YWxDdXN0b21lckF0dHJpYnV0ZVxuICA+KCd1c3VhbF9jdXN0b21lcicsIGF0dHJpYnV0ZXMsIHtcbiAgICBmcmVlemVUYWJsZU5hbWU6IHRydWUsXG4gIH0pO1xuICAvLyB1c3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgLy8gICB1c3VhbEN1c3RvbWVyLmJlbG9uZ3NUbyhtb2RlbHMuVHJpcCwge1xuICAvLyAgICAgLy9PS1xuICAvLyAgICAgZm9yZWlnbktleTogJ2lkJyxcbiAgLy8gICB9KTtcbiAgLy8gfTtcbiAgVXN1YWxDdXN0b21lci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgVXN1YWxDdXN0b21lci5iZWxvbmdzVG8obW9kZWxzLlBlcnNvbmFsR3JvdXAsIHtcbiAgICAgIC8vT0tcbiAgICAgIGZvcmVpZ25LZXk6ICdpZCcsXG4gICAgfSk7XG4gIH07XG5cbiAgVXN1YWxDdXN0b21lci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgVXN1YWxDdXN0b21lci5iZWxvbmdzVG8obW9kZWxzLkNsaWVudENvbXBhbnksIHtcbiAgICAgIC8vT0tcbiAgICAgIGZvcmVpZ25LZXk6ICdpZCcsXG4gICAgfSk7XG4gIH07XG5cbiAgVXN1YWxDdXN0b21lci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgVXN1YWxDdXN0b21lci5oYXNNYW55KG1vZGVscy5QYXNzZW5nZXJMdWdnYWdlLCB7XG4gICAgICBmb3JlaWduS2V5OiAndXN1YWxfY3VzdG9tZXJfaWQnLFxuICAgIH0pO1xuICB9O1xuICBVc3VhbEN1c3RvbWVyLmFzc29jaWF0ZSA9IChtb2RlbHMpID0+IHtcbiAgICBVc3VhbEN1c3RvbWVyLmhhc01hbnkobW9kZWxzLlBhc3NlcG9ydCwge1xuICAgICAgZm9yZWlnbktleTogJ3VzdWFsX2N1c3RvbWVyX2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgVXN1YWxDdXN0b21lci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgVXN1YWxDdXN0b21lci5oYXNNYW55KG1vZGVscy5TdG9wb3Zlciwge1xuICAgICAgZm9yZWlnbktleTogJ3VzdWFsX2N1c3RvbWVyX2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgVXN1YWxDdXN0b21lci5hc3NvY2lhdGUgPSAobW9kZWxzKSA9PiB7XG4gICAgVXN1YWxDdXN0b21lci5oYXNNYW55KG1vZGVscy5UcmlwVXN1YWxDdXN0b21lciwge1xuICAgICAgZm9yZWlnbktleTogJ3VzdWFsX2N1c3RvbWVyX2lkJyxcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIFVzdWFsQ3VzdG9tZXI7XG59O1xuIl19