"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const proforma = db.ProformaInvoice;
module.exports = {
    //insertion of a new company
    insertProforma(req, res) {
        sequelize
            .query("INSERT INTO proforma_invoice (heading, footer, ref_invoice, date, total_HT,taxe, total_TTC, client_company_id, tva_id) VALUES('" +
            req.body.heading +
            "', '" +
            req.body.footer +
            "','" +
            req.body.ref_invoice +
            "', '" +
            req.body.date +
            "', '" +
            req.body.total_HT +
            "','" +
            req.body.taxe +
            "', '" +
            req.body.total_TTC +
            "', '" +
            req.body.client_company_id +
            "','" +
            req.body.tva_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('proforma added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateProforma(req, res) {
        return proforma
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((proforma) => {
            if (!proforma) {
                return res.status(200).send({
                    message: ' inexistant proforma invoice',
                });
            }
            else {
                return proforma
                    .update({
                    heading: req.body.heading,
                    footer: req.body.footer,
                    ref_invoice: req.body.ref_invoice,
                    date: req.body.date,
                    total_HT: req.body.total_HT,
                    taxe: req.body.taxe,
                    total_TTC: req.body.total_TTC,
                    client_company_id: req.body.client_company_id,
                    tva_id: req.body.tva_id,
                })
                    .then(() => res.status(200).send(`invoice was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readProforma(req, res) {
        return proforma
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((proforma) => {
            if (!proforma) {
                return res.status(200).send({
                    message: 'inexistant proforma invoice',
                });
            }
            else {
                return res.status(200).send(proforma);
            }
        });
    },
    // read proforma with pagination
    readProformaChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return proforma
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((proforma) => {
            if (!proforma) {
                return res.status(200).send({
                    message: 'inexistant proforma',
                });
            }
            else {
                return res.status(200).send(proforma);
            }
        });
    },
    deleteProforma(req, res) {
        sequelize
            .query("DELETE FROM proforma_invoice WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('proforma invoice deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,