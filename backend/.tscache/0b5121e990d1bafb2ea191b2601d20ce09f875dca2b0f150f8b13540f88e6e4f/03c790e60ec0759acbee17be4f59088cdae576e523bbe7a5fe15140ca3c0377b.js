"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const usualCustomer = db.UsualCustomer;
module.exports = {
    insertUsualCustomer(req, res) {
        sequelize
            .query("INSERT INTO usual_customer (first_name, last_name, personal_ident, age, special_condition ) VALUES('" +
            req.body.first_name +
            "', '" +
            req.body.last_name +
            "','" +
            req.body.personal_ident +
            "', '" +
            req.body.age +
            "', '" +
            req.body.special_condition +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('usualCustomer added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateUsualCustomer(req, res) {
        return usualCustomer
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((usualCustomer) => {
            if (!usualCustomer) {
                return res.status(200).send({
                    message: ' inexistant usualCustomer',
                });
            }
            else {
                return usualCustomer
                    .update({
                    first_name: req.body.first_name,
                    last_name: req.body.last_name,
                    personal_ident: req.body.personal_ident,
                    age: req.body.age,
                    special_condition: req.body.special_condition,
                })
                    .then(() => res
                    .status(200)
                    .send(`${req.body.first_name} was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readUsualCustomer(req, res) {
        return usualCustomer
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((usualCustomer) => {
            if (!usualCustomer) {
                return res.status(200).send({
                    message: 'inexistant usualCustomer',
                });
            }
            else {
                return res.status(200).send(usualCustomer);
            }
        });
    },
    // read usualCustomer with pagination
    readUsualCustomerChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return usualCustomer
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((usualCustomer) => {
            if (!usualCustomer) {
                return res.status(200).send({
                    message: 'inexistant usualCustomer',
                });
            }
            else {
                return res.status(200).send(usualCustomer);
            }
        });
    },
    deleteUsualCustomer(req, res) {
        sequelize
            .query("DELETE FROM usual_customer WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('usualCustomer deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,