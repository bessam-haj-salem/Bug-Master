"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const maintenance = db.VehiculeMaintenance;
module.exports = {
    insertMaintenance(req, res) {
        sequelize
            .query("INSERT INTO vehicule_maintenance (nature_maintenance, date_maintenance, designation_maintenance, cost_maintenance,  vehicule_fleet_id ) VALUES('" +
            req.body.nature_maintenance +
            "', '" +
            req.body.date_maintenance +
            "','" +
            req.body.designation_maintenance +
            "', '" +
            req.body.cost_maintenance +
            "', '" +
            req.body.vehicule_fleet_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('vehicule maintenance added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateMaintenance(req, res) {
        return maintenance
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((maintenance) => {
            if (!maintenance) {
                return res.status(200).send({
                    message: ' inexistant vehicule maintenance',
                });
            }
            else {
                return maintenance
                    .update({
                    nature_maintenance: req.body.nature_maintenance,
                    date_maintenance: req.body.date_maintenance,
                    designation_maintenance: req.body.designation_maintenance,
                    cost_maintenance: req.body.cost_maintenance,
                    vehicule_fleet_id: req.body.vehicule_fleet_id,
                })
                    .then(() => res
                    .status(200)
                    .send(`vehicule maintenance was updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readMaintenance(req, res) {
        return maintenance
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((maintenance) => {
            if (!maintenance) {
                return res.status(200).send({
                    message: 'inexistant vehicule maintenance',
                });
            }
            else {
                return res.status(200).send(maintenance);
            }
        });
    },
    // read maintenance with pagination
    readMaintenanceChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return maintenance
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((maintenance) => {
            if (!maintenance) {
                return res.status(200).send({
                    message: 'inexistant maintenance',
                });
            }
            else {
                return res.status(200).send(maintenance);
            }
        });
    },
    deleteMaintenance(req, res) {
        sequelize
            .query("DELETE FROM vehicule_maintenance WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('vehicule maintenance deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,