"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelizeConfig = require('../config/sequelizeConfig.json');
const models_ts_1 = require("../models-ts");
const db = models_ts_1.createModels(sequelizeConfig);
const sequelize = db.sequelize;
const tripUsualCustomer = db.TripUsualCustomer;
module.exports = {
    insertTripUsualCustomer(req, res) {
        sequelize
            .query("INSERT INTO trip_usual_customer (trip_id,usual_customer_id  ) VALUES('" +
            req.body.trip_id +
            "', '" +
            req.body.usual_customer_id +
            "')", { type: sequelize.QueryTypes.INSERT }, {})
            .then(res.status(200).send('tripUsualCustomer added successfully'))
            .catch((error) => res.status(400).send(error));
    },
    updateTripUsualCustomer(req, res) {
        return tripUsualCustomer
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((tripUsualCustomer) => {
            if (!tripUsualCustomer) {
                return res.status(200).send({
                    message: ' tripUsualCustomer inexistant ',
                });
            }
            else {
                return tripUsualCustomer
                    .update({
                    trip_id: req.body.trip_id,
                    usual_customer_id: req.body.usual_customer_id,
                })
                    .then(() => res.status(200).send(`tripUsualCustomer updated successfully`))
                    .catch((error) => res.status(400).send(error));
            }
        })
            .catch((error) => res.status(400).send(error));
    },
    readTripUsualCustomer(req, res) {
        return tripUsualCustomer
            .findOne({
            where: { id: req.params.id },
            attributes: {},
        })
            .then((tripUsualCustomer) => {
            if (!tripUsualCustomer) {
                return res.status(200).send({
                    message: 'tripUsualCustomer inexistant ',
                });
            }
            else {
                return res.status(200).send(tripUsualCustomer);
            }
        });
    },
    // read tripUsualCustomer with pagination
    readTripUsualCustomerChunk(req, res) {
        let page = req.body.page;
        let pageSize = req.body.pageSize;
        return tripUsualCustomer
            .findAll({
            // where: {},
            offset: page,
            limit: pageSize,
        })
            .then((tripUsualCustomer) => {
            if (!tripUsualCustomer) {
                return res.status(200).send({
                    message: 'inexistant tripUsualCustomer',
                });
            }
            else {
                return res.status(200).send(tripUsualCustomer);
            }
        });
    },
    deleteTripUsualCustomer(req, res) {
        sequelize
            .query("DELETE FROM trip_usual_customer WHERE id='" + req.params.id + "'", { type: sequelize.QueryTypes.DELETE }, {})
            .then(res.status(200).send('tripUsualCustomer deleted successfully'))
            .catch((error) => res.status(400).send(error));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,