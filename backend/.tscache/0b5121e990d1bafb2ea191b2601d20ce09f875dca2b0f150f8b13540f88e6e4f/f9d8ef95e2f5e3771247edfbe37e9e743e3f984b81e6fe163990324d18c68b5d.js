"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createModels = void 0;
const sequelize_1 = require("sequelize");
const Test_1 = require("./Test");
const Hotel_1 = require("./Hotel");
const Image_1 = require("./Image");
const Aeroport_1 = require("./Aeroport");
const Vehicule_1 = require("./Vehicule");
const Prix_1 = require("./Prix");
//************api rafahia*****************
const ClientCompany_1 = require("./ClientCompany");
const Trip_1 = require("./Trip");
const Driver_1 = require("./Driver");
const UsualCustomer_1 = require("./UsualCustomer");
const Passeport_1 = require("./Passeport");
const PersonalGroup_1 = require("./PersonalGroup");
const Price_1 = require("./Price");
const VehiculeFleet_1 = require("./VehiculeFleet");
const PassengerLuggage_1 = require("./PassengerLuggage");
const ProformaInvoice_1 = require("./ProformaInvoice");
const TechnicalInspection_1 = require("./TechnicalInspection");
const VehiculeInsurance_1 = require("./VehiculeInsurance");
const VehiculeMaintenance_1 = require("./VehiculeMaintenance");
const Tva_1 = require("./Tva");
const TripDriver_1 = require("./TripDriver");
const TripUsualCustomer_1 = require("./TripUsualCustomer");
const TripClientCompany_1 = require("./TripClientCompany");
const TradeMargin_1 = require("./TradeMargin");
const UsualCustomerClientCompany_1 = require("./UsualCustomerClientCompany");
const RentClientCompany_1 = require("./RentClientCompany");
const RentUsualCustomer_1 = require("./RentUsualCustomer");
const RentWithDriverClientCompany_1 = require("./RentWithDriverClientCompany");
const RentWithDriverUsualCustomer_1 = require("./RentWithDriverUsualCustomer");
const RentWithDriverClientCompanyDriver_1 = require("./RentWithDriverClientCompanyDriver");
const RentWithDriverUsualCustomerDriver_1 = require("./RentWithDriverUsualCustomerDriver");
const StopoverTrip_1 = require("./StopoverTrip");
const StopoverUsualCustomer_1 = require("./StopoverUsualCustomer");
//********************************************************* */
//sc-26-2020
//mappage
//mappage
//scsc-26-03-2020
exports.createModels = (sequelizeConfig) => {
    const { database, username, password, params } = sequelizeConfig;
    const sequelize = new sequelize_1.Sequelize(database, username, password, params);
    const db = {
        sequelize,
        Sequelize: sequelize_1.Sequelize,
        //Agence: AgenceFactory(sequelize, Sequelize),
        Test: Test_1.TestFactory(sequelize, sequelize_1.Sequelize),
        Hotel: Hotel_1.HotelFactory(sequelize, sequelize_1.Sequelize),
        Image: Image_1.ImageFactory(sequelize, sequelize_1.Sequelize),
        Aeroport: Aeroport_1.AeroportFactory(sequelize, sequelize_1.Sequelize),
        Vehicule: Vehicule_1.VehiculeFactory(sequelize, sequelize_1.Sequelize),
        Prix: Prix_1.PrixFactory(sequelize, sequelize_1.Sequelize),
        //***************api rafahia**************** */
        ClientCompany: ClientCompany_1.ClientCompanyFactory(sequelize, sequelize_1.Sequelize),
        Trip: Trip_1.TripFactory(sequelize, sequelize_1.Sequelize),
        Driver: Driver_1.DriverFactory(sequelize, sequelize_1.Sequelize),
        UsualCustomer: UsualCustomer_1.UsualCustomerFactory(sequelize, sequelize_1.Sequelize),
        Passeport: Passeport_1.PasseportFactory(sequelize, sequelize_1.Sequelize),
        PersonalGroup: PersonalGroup_1.PersonalGroupFactory(sequelize, sequelize_1.Sequelize),
        Price: Price_1.PriceFactory(sequelize, sequelize_1.Sequelize),
        VehiculeFleet: VehiculeFleet_1.VehiculeFleetFactory(sequelize, sequelize_1.Sequelize),
        PassengerLuggage: PassengerLuggage_1.PassengerLuggageFactory(sequelize, sequelize_1.Sequelize),
        ProformaInvoice: ProformaInvoice_1.ProformaInvoiceFactory(sequelize, sequelize_1.Sequelize),
        TechnicalInspection: TechnicalInspection_1.TechnicalInspectionFactory(sequelize, sequelize_1.Sequelize),
        VehiculeInsurance: VehiculeInsurance_1.VehiculeInsuranceFactory(sequelize, sequelize_1.Sequelize),
        VehiculeMaintenance: VehiculeMaintenance_1.VehiculeMaintenanceFactory(sequelize, sequelize_1.Sequelize),
        Tva: Tva_1.TvaFactory(sequelize, sequelize_1.Sequelize),
        TripDriver: TripDriver_1.TripDriverFactory(sequelize, sequelize_1.Sequelize),
        TripUsualCustomer: TripUsualCustomer_1.TripUsualCustomerFactory(sequelize, sequelize_1.Sequelize),
        TripClientCompany: TripClientCompany_1.TripClientCompanyFactory(sequelize, sequelize_1.Sequelize),
        TradeMargin: TradeMargin_1.TradeMarginFactory(sequelize, sequelize_1.Sequelize),
        UsualCustomerClientCompany: UsualCustomerClientCompany_1.UsualCustomerClientCompanyFactory(sequelize, sequelize_1.Sequelize),
        RentClientCompany: RentClientCompany_1.RentClientCompanyFactory(sequelize, sequelize_1.Sequelize),
        RentUsualCustomer: RentUsualCustomer_1.RentUsualCustomerFactory(sequelize, sequelize_1.Sequelize),
        RentWithDriverClientCompany: RentWithDriverClientCompany_1.RentWithDriverClientCompanyFactory(sequelize, sequelize_1.Sequelize),
        RentWithDriverUsualCustomer: RentWithDriverUsualCustomer_1.RentWithDriverUsualCustomerFactory(sequelize, sequelize_1.Sequelize),
        RentWithDriverClientCompanyDriver: RentWithDriverClientCompanyDriver_1.RentWithDriverClientCompanyDriverFactory(sequelize, sequelize_1.Sequelize),
        RentWithDriverUsualCustomerDriver: RentWithDriverUsualCustomerDriver_1.RentWithDriverUsualCustomerDriverFactory(sequelize, sequelize_1.Sequelize),
        StopoverTrip: StopoverTrip_1.StopoverTripFactory(sequelize, sequelize_1.Sequelize),
        StopoverUsualCustomer: StopoverUsualCustomer_1.StopoverUsualCustomerFactory(sequelize, sequelize_1.Sequelize),
    };
    Object.keys(db).forEach((modelName) => {
        if (db[modelName].associate) {
            db[modelName].associate(db);
        }
    });
    return db;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,