"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//sc
let express = require('express');
var str = '';
var sleep = require('sleep');
var Sequelize = require('sequelize');
let app = express();
// var fs = require('fs');
// let bodyParser = require('body-parser');
// let multer = require('multer');
// let upload = multer();
// let parser = require('xml2json');
// const xml2js = require('xml2js');
// const axios = require('axios');
// let xmlParser = require('xml2json'); //pour parser de xml-->json
// let convert = require('xml-js');
// var js2xmlparser = require('js2xmlparser'); //pour parser json--->xml
const Project = require('../controllers').project;
const Issues = require('../controllers').issues;
let WebSocket = require('ws');
var path = require('path');
var formidable = require('formidable');
var fs = require('fs');
// api routes
// global error handler
module.exports = (app) => {
    app.use(function (req, res, next) {
        res.header('Access-Control-Allow-Origin', '*');
        res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept,uix,From,Authorization ');
        res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');
        next();
    });
    var path = require('path');
    //**Project */
    app.post('/apiRF/Project/insert', Project.insertProject);
    app.put('/apiRF/Project/update/:id', Project.updateProject);
    app.get('/apiRF/Project/read/:id', Project.readProject);
    app.delete('/apiRF/Project/delete/:id', Project.deleteProject);
    app.post('/apiRF/Project/readPage', Project.readProjectChunk);
    //**Issues */
    app.post('/apiRF/Issues/insert', Issues.insertIssues);
    app.put('/apiRF/Issues/update/:id', Issues.updateIssues);
    app.get('/apiRF/Issues/read/:id', Issues.readIssues);
    app.delete('/apiRF/Issues/delete/:id', Issues.deleteIssues);
    app.post('/apiRF/Issues/readPage', Issues.readIssuesChunk);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYmFzc2VtL0RvY3VtZW50cy9QZXJzb25uZWxfUHJvamVjdC9idWctbWFzdGVyL2JhY2tlbmQvc2VydmVyL3JvdXRlcy9pbmRleC50cyIsInNvdXJjZXMiOlsiL2hvbWUvYmFzc2VtL0RvY3VtZW50cy9QZXJzb25uZWxfUHJvamVjdC9idWctbWFzdGVyL2JhY2tlbmQvc2VydmVyL3JvdXRlcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7QUFDSixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRTdCLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVyQyxJQUFJLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUNwQiwwQkFBMEI7QUFDMUIsMkNBQTJDO0FBQzNDLGtDQUFrQztBQUNsQyx5QkFBeUI7QUFDekIsb0NBQW9DO0FBQ3BDLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFFbEMsbUVBQW1FO0FBQ25FLG1DQUFtQztBQUNuQyx3RUFBd0U7QUFFeEUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDO0FBQ2xELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQU1oRCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN2QyxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkIsYUFBYTtBQUViLHVCQUF1QjtBQUV2QixNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7SUFDdkIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFTLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUM3QixHQUFHLENBQUMsTUFBTSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxNQUFNLENBQ1IsOEJBQThCLEVBQzlCLHdFQUF3RSxDQUN6RSxDQUFDO1FBQ0YsR0FBRyxDQUFDLE1BQU0sQ0FDUiw4QkFBOEIsRUFDOUIsaUNBQWlDLENBQ2xDLENBQUM7UUFFRixJQUFJLEVBQUUsQ0FBQztJQUNULENBQUMsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTNCLGNBQWM7SUFDZCxHQUFHLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RCxHQUFHLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM1RCxHQUFHLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RCxHQUFHLENBQUMsTUFBTSxDQUFDLDJCQUEyQixFQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvRCxHQUFHLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzlELGFBQWE7SUFDYixHQUFHLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0RCxHQUFHLENBQUMsR0FBRyxDQUFDLDBCQUEwQixFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6RCxHQUFHLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyRCxHQUFHLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1RCxHQUFHLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvL3NjXG5sZXQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbnZhciBzdHIgPSAnJztcbnZhciBzbGVlcCA9IHJlcXVpcmUoJ3NsZWVwJyk7XG5cbnZhciBTZXF1ZWxpemUgPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcblxubGV0IGFwcCA9IGV4cHJlc3MoKTtcbi8vIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4vLyBsZXQgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG4vLyBsZXQgbXVsdGVyID0gcmVxdWlyZSgnbXVsdGVyJyk7XG4vLyBsZXQgdXBsb2FkID0gbXVsdGVyKCk7XG4vLyBsZXQgcGFyc2VyID0gcmVxdWlyZSgneG1sMmpzb24nKTtcbi8vIGNvbnN0IHhtbDJqcyA9IHJlcXVpcmUoJ3htbDJqcycpO1xuLy8gY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG4vLyBsZXQgeG1sUGFyc2VyID0gcmVxdWlyZSgneG1sMmpzb24nKTsgLy9wb3VyIHBhcnNlciBkZSB4bWwtLT5qc29uXG4vLyBsZXQgY29udmVydCA9IHJlcXVpcmUoJ3htbC1qcycpO1xuLy8gdmFyIGpzMnhtbHBhcnNlciA9IHJlcXVpcmUoJ2pzMnhtbHBhcnNlcicpOyAvL3BvdXIgcGFyc2VyIGpzb24tLS0+eG1sXG5cbmNvbnN0IFByb2plY3QgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLnByb2plY3Q7XG5jb25zdCBJc3N1ZXMgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLmlzc3VlcztcblxuLy9jb25zdCBhdXRoPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLmF1dGg7XG5cbmltcG9ydCAqIGFzIHByb2Nlc3N1cyBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxubGV0IFdlYlNvY2tldCA9IHJlcXVpcmUoJ3dzJyk7XG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBmb3JtaWRhYmxlID0gcmVxdWlyZSgnZm9ybWlkYWJsZScpO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcblxuLy8gYXBpIHJvdXRlc1xuXG4vLyBnbG9iYWwgZXJyb3IgaGFuZGxlclxuXG5tb2R1bGUuZXhwb3J0cyA9IChhcHApID0+IHtcbiAgYXBwLnVzZShmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgcmVzLmhlYWRlcihcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJyxcbiAgICAgICdPcmlnaW4sIFgtUmVxdWVzdGVkLVdpdGgsIENvbnRlbnQtVHlwZSwgQWNjZXB0LHVpeCxGcm9tLEF1dGhvcml6YXRpb24gJ1xuICAgICk7XG4gICAgcmVzLmhlYWRlcihcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJyxcbiAgICAgICdQT1NULCBHRVQsIFBVVCwgREVMRVRFLCBPUFRJT05TJ1xuICAgICk7XG5cbiAgICBuZXh0KCk7XG4gIH0pO1xuICB2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuICAvLyoqUHJvamVjdCAqL1xuICBhcHAucG9zdCgnL2FwaVJGL1Byb2plY3QvaW5zZXJ0JywgUHJvamVjdC5pbnNlcnRQcm9qZWN0KTtcbiAgYXBwLnB1dCgnL2FwaVJGL1Byb2plY3QvdXBkYXRlLzppZCcsIFByb2plY3QudXBkYXRlUHJvamVjdCk7XG4gIGFwcC5nZXQoJy9hcGlSRi9Qcm9qZWN0L3JlYWQvOmlkJywgUHJvamVjdC5yZWFkUHJvamVjdCk7XG4gIGFwcC5kZWxldGUoJy9hcGlSRi9Qcm9qZWN0L2RlbGV0ZS86aWQnLCBQcm9qZWN0LmRlbGV0ZVByb2plY3QpO1xuICBhcHAucG9zdCgnL2FwaVJGL1Byb2plY3QvcmVhZFBhZ2UnLCBQcm9qZWN0LnJlYWRQcm9qZWN0Q2h1bmspO1xuICAvLyoqSXNzdWVzICovXG4gIGFwcC5wb3N0KCcvYXBpUkYvSXNzdWVzL2luc2VydCcsIElzc3Vlcy5pbnNlcnRJc3N1ZXMpO1xuICBhcHAucHV0KCcvYXBpUkYvSXNzdWVzL3VwZGF0ZS86aWQnLCBJc3N1ZXMudXBkYXRlSXNzdWVzKTtcbiAgYXBwLmdldCgnL2FwaVJGL0lzc3Vlcy9yZWFkLzppZCcsIElzc3Vlcy5yZWFkSXNzdWVzKTtcbiAgYXBwLmRlbGV0ZSgnL2FwaVJGL0lzc3Vlcy9kZWxldGUvOmlkJywgSXNzdWVzLmRlbGV0ZUlzc3Vlcyk7XG4gIGFwcC5wb3N0KCcvYXBpUkYvSXNzdWVzL3JlYWRQYWdlJywgSXNzdWVzLnJlYWRJc3N1ZXNDaHVuayk7XG59O1xuIl19