"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//sc
let express = require('express');
var str = '';
var sleep = require('sleep');
var Sequelize = require('sequelize');
let app = express();
var fs = require('fs');
let bodyParser = require('body-parser');
let multer = require('multer');
let upload = multer();
let parser = require('xml2json');
const xml2js = require('xml2js');
const axios = require('axios');
let xmlParser = require('xml2json'); //pour parser de xml-->json
let convert = require('xml-js');
var js2xmlparser = require('js2xmlparser'); //pour parser json--->xml
//const userService=require('../controllers').user;
const tableau = require('../controllers').tableau;
//const ville1 = require('../controllers').ville1;
let WebSocket = require('ws');
var path = require('path');
var formidable = require('formidable');
var fs = require('fs');
// api routes
// global error handler
module.exports = (app) => {
    app.use(function (req, res, next) {
        res.header('Access-Control-Allow-Origin', '*');
        res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept,uix,From,Authorization ');
        res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');
    }
    //**vehiculeFleet **/
    // app.post('/apiRF/vehiculeFleet/insert', VehiculeFleet.insertVehicule);
    // app.put('/apiRF/vehiculeFleet/update/:id', VehiculeFleet.updateVehicule);
    // app.get('/apiRF/vehiculeFleet/read/:id', VehiculeFleet.readVehicule);
    // app.delete('/apiRF/vehiculeFleet/delete/:id', VehiculeFleet.deleteVehicule);
    // app.post('/apiRF/vehiculeFleet/readPage', VehiculeFleet.readVehiculeChunk);
    );
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvYmFzc2VtL0RvY3VtZW50cy9QZXJzb25uZWxfUHJvamVjdC9idWctbWFzdGVyL2JhY2tlbmQvc2VydmVyL3JvdXRlcy9pbmRleC50cyIsInNvdXJjZXMiOlsiL2hvbWUvYmFzc2VtL0RvY3VtZW50cy9QZXJzb25uZWxfUHJvamVjdC9idWctbWFzdGVyL2JhY2tlbmQvc2VydmVyL3JvdXRlcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7QUFDSixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQ2IsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRTdCLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVyQyxJQUFJLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUNwQixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3hDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixJQUFJLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUN0QixJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUUvQixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQywyQkFBMkI7QUFDaEUsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtBQXFEckUsbURBQW1EO0FBQ25ELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUNsRCxrREFBa0Q7QUFDbEQsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdkMsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXZCLGFBQWE7QUFFYix1QkFBdUI7QUFFdkIsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFO0lBQ3ZCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUk7UUFDOUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQyxHQUFHLENBQUMsTUFBTSxDQUNSLDhCQUE4QixFQUM5Qix3RUFBd0UsQ0FDekUsQ0FBQztRQUNGLEdBQUcsQ0FBQyxNQUFNLENBQ1IsOEJBQThCLEVBQzlCLGlDQUFpQyxDQUNsQyxDQUFDO0lBRUYsQ0FBQztJQUlILHFCQUFxQjtJQUNyQix5RUFBeUU7SUFDekUsNEVBQTRFO0lBQzVFLHdFQUF3RTtJQUN4RSwrRUFBK0U7SUFDL0UsOEVBQThFO0tBRTdFLENBQUE7QUFBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvL3NjXG5sZXQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbnZhciBzdHIgPSAnJztcbnZhciBzbGVlcCA9IHJlcXVpcmUoJ3NsZWVwJyk7XG5cbnZhciBTZXF1ZWxpemUgPSByZXF1aXJlKCdzZXF1ZWxpemUnKTtcblxubGV0IGFwcCA9IGV4cHJlc3MoKTtcbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5sZXQgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5sZXQgbXVsdGVyID0gcmVxdWlyZSgnbXVsdGVyJyk7XG5sZXQgdXBsb2FkID0gbXVsdGVyKCk7XG5sZXQgcGFyc2VyID0gcmVxdWlyZSgneG1sMmpzb24nKTtcbmNvbnN0IHhtbDJqcyA9IHJlcXVpcmUoJ3htbDJqcycpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5sZXQgeG1sUGFyc2VyID0gcmVxdWlyZSgneG1sMmpzb24nKTsgLy9wb3VyIHBhcnNlciBkZSB4bWwtLT5qc29uXG5sZXQgY29udmVydCA9IHJlcXVpcmUoJ3htbC1qcycpO1xudmFyIGpzMnhtbHBhcnNlciA9IHJlcXVpcmUoJ2pzMnhtbHBhcnNlcicpOyAvL3BvdXIgcGFyc2VyIGpzb24tLS0+eG1sXG5cbi8vc2NcblxuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqYXBpIHJhZmFoaWE6KioqKioqKioqKioqKlxuLy8gY29uc3QgQ2xpZW50Q29tcGFueSA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykuY2xpZW50Q29tcGFueTtcbi8vIGNvbnN0IFRyaXAgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLnRyaXA7XG4vLyBjb25zdCBEcml2ZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLmRyaXZlcjtcblxuLy8gY29uc3QgUGFzc2Vwb3J0ID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS5wYXNzZXBvcnQ7XG4vLyBjb25zdCBQZXJzb25hbEdyb3VwID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS5wZXJzb25hbEdyb3VwO1xuLy8gY29uc3QgVmVoaWN1bGVGbGVldCA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykudmVoaWN1bGVGbGVldDtcbi8vIGNvbnN0IFByaWNlID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS5wcmljZTtcbi8vIGNvbnN0IFBhc3Nlbmdlckx1Z2dhZ2UgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLnBhc3Nlbmdlckx1Z2dhZ2U7XG4vLyBjb25zdCBQcm9mb3JtYSA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykucHJvZm9ybWFJbnZvaWNlO1xuLy8gY29uc3QgVGVjaG5pY2FsSW5zcGVjdGlvbiA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykuaW5zcGVjdGlvbjtcbi8vIGNvbnN0IFZlaGljdWxlSW5zdXJhbmNlID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS5pbnN1cmFuY2U7XG4vLyBjb25zdCBWZWhpY3VsZU1haW50ZW5hbmNlID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS5tYWludGVuYW5jZTtcbi8vIGNvbnN0IFR2YSA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykudHZhO1xuLy8gY29uc3QgVHJpcERyaXZlciA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykudHJpcERyaXZlcjtcbi8vIGNvbnN0IFRyaXBVc3VhbEN1c3RvbWVyID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS50cmlwVXN1YWxDdXN0b21lcjtcbi8vIGNvbnN0IFRyaXBDbGllbnRDb21wYW55ID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS50cmlwQ2xpZW50Q29tcGFueTtcbi8vIGNvbnN0IFRyYWRlTWFyZ2luID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS50cmFkZU1hcmdpbjtcblxuLy8gY29uc3QgVXN1YWxDdXN0b21lciA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykudXN1YWxDdXN0b21lcjtcbi8vIGNvbnN0IFVzdWFsQ3VzdG9tZXJDbGllbnRDb21wYW55ID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKVxuLy8gICAudXN1YWxDdXN0b21lckNsaWVudENvbXBhbnk7XG4vLyBjb25zdCBSZW50Q2xpZW50Q29tcGFueSA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykucmVudENsaWVudENvbXBhbnk7XG4vLyBjb25zdCBSZW50VXN1YWxDdXN0b21lciA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykucmVudFVzdWFsQ3VzdG9tZXI7XG4vLyBjb25zdCBSZW50V2l0aERyaXZlckNsaWVudENvbXBhbnkgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpXG4vLyAgIC5yZW50V2l0aERyaXZlckNsaWVudENvbXBhbnk7XG4vLyBjb25zdCBSZW50V2l0aERyaXZlclVzdWFsQ3VzdG9tZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpXG4vLyAgIC5yZW50V2l0aERyaXZlclVzdWFsQ3VzdG9tZXI7XG4vLyBjb25zdCBSZW50V2l0aERyaXZlckNsaWVudENvbXBhbnlEcml2ZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpXG4vLyAgIC5yZW50V2l0aERyaXZlckNsaWVudENvbXBhbnlEcml2ZXI7XG4vLyBjb25zdCBSZW50V2l0aERyaXZlclVzdWFsQ3VzdG9tZXJEcml2ZXIgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpXG4vLyAgIC5yZW50V2l0aERyaXZlclVzdWFsQ3VzdG9tZXJEcml2ZXI7XG4vLyBjb25zdCBTdG9wb3ZlclRyaXAgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLnN0b3BvdmVyVHJpcDtcbi8vIGNvbnN0IFN0b3BvdmVyVXN1YWxDdXN0b21lciA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykuc3RvcG92ZXJVc3VhbEN1c3RvbWVyO1xuLy9jb25zdCBVc3VhbEN1c3RvbWVyUGVyc29uYWxHcm91cCA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJylcbiAgLy8udXN1YWxDdXN0b21lclBlcnNvbmFsR3JvdXA7IC8vICoqKioqKioqKioqKioqKioqKioqKioqYXBpIHJhZmFoaWE6KioqKioqKioqKioqKlxuXG4vLyBURVNUIEJFU1NBTVxuLy8gY29uc3QgdGVzdDEgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLmxpc3Q7XG4vLyBjb25zdCBob3RlbCA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykuaG90ZWwxO1xuLy8gY29uc3QgaW1hZ2UgPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLmltYWdlMTtcblxuLy9jb25zdCBhdXRoPSByZXF1aXJlKCcuLi9jb250cm9sbGVycycpLmF1dGg7XG5cbmltcG9ydCAqIGFzIHByb2Nlc3N1cyBmcm9tICdjaGlsZF9wcm9jZXNzJztcbi8vY29uc3QgdXNlclNlcnZpY2U9cmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS51c2VyO1xuY29uc3QgdGFibGVhdSA9IHJlcXVpcmUoJy4uL2NvbnRyb2xsZXJzJykudGFibGVhdTtcbi8vY29uc3QgdmlsbGUxID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMnKS52aWxsZTE7XG5sZXQgV2ViU29ja2V0ID0gcmVxdWlyZSgnd3MnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGZvcm1pZGFibGUgPSByZXF1aXJlKCdmb3JtaWRhYmxlJyk7XG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuXG4vLyBhcGkgcm91dGVzXG5cbi8vIGdsb2JhbCBlcnJvciBoYW5kbGVyXG5cbm1vZHVsZS5leHBvcnRzID0gKGFwcCkgPT4ge1xuICBhcHAudXNlKGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgcmVzLmhlYWRlcihcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJyxcbiAgICAgICdPcmlnaW4sIFgtUmVxdWVzdGVkLVdpdGgsIENvbnRlbnQtVHlwZSwgQWNjZXB0LHVpeCxGcm9tLEF1dGhvcml6YXRpb24gJ1xuICAgICk7XG4gICAgcmVzLmhlYWRlcihcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJyxcbiAgICAgICdQT1NULCBHRVQsIFBVVCwgREVMRVRFLCBPUFRJT05TJ1xuICAgICk7XG5cbiAgICB9XG5cblxuICBcbiAgLy8qKnZlaGljdWxlRmxlZXQgKiovXG4gIC8vIGFwcC5wb3N0KCcvYXBpUkYvdmVoaWN1bGVGbGVldC9pbnNlcnQnLCBWZWhpY3VsZUZsZWV0Lmluc2VydFZlaGljdWxlKTtcbiAgLy8gYXBwLnB1dCgnL2FwaVJGL3ZlaGljdWxlRmxlZXQvdXBkYXRlLzppZCcsIFZlaGljdWxlRmxlZXQudXBkYXRlVmVoaWN1bGUpO1xuICAvLyBhcHAuZ2V0KCcvYXBpUkYvdmVoaWN1bGVGbGVldC9yZWFkLzppZCcsIFZlaGljdWxlRmxlZXQucmVhZFZlaGljdWxlKTtcbiAgLy8gYXBwLmRlbGV0ZSgnL2FwaVJGL3ZlaGljdWxlRmxlZXQvZGVsZXRlLzppZCcsIFZlaGljdWxlRmxlZXQuZGVsZXRlVmVoaWN1bGUpO1xuICAvLyBhcHAucG9zdCgnL2FwaVJGL3ZlaGljdWxlRmxlZXQvcmVhZFBhZ2UnLCBWZWhpY3VsZUZsZWV0LnJlYWRWZWhpY3VsZUNodW5rKTtcblxuICApIH1cbiJdfQ==